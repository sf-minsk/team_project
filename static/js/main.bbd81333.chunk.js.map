{"version":3,"sources":["features/error404/Error404.module.css","dal/register-api.ts","dal/auth-api.ts","bll/profile-reducer.ts","bll/auth-reducer.ts","bll/app-reducer.ts","bll/register-reducer.ts","features/errors/ErrorSnackbar.tsx","components/auth/registration/Registration.tsx","components/auth/login/Login.tsx","dal/changePassword-api.ts","utils/changePasswordModel-util.ts","bll/changePassword-reducer.ts","components/auth/forgotPassword/ForgotPassword.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/auth/forgotPassword/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","dal/cards-api.ts","bll/cards-reducer.ts","components/main/Main.tsx","components/header/Header.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","registerApi","email","password","post","authApi","data","delete","initialState","setProfileAC","type","payload","isLoggedIn","setSignInAC","value","logoutTC","dispatch","a","setAppStatusAC","error","errorType","status","isInitialized","setAppErrorAC","setIsInitializedAC","isRegistered","ErrorSnackbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","Registration","console","log","classes","useStyles","register","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","response","message","resetForm","to","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","Typography","variant","CircularProgress","style","position","top","textAlign","handleSubmit","form","noValidate","TextField","height","fullWidth","label","margin","autoFocus","helperText","touched","errors","getFieldProps","Button","color","submit","disabled","isValid","makeStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","palette","secondary","main","width","Login","requestStatus","rememberMe","res","FormControlLabel","control","Checkbox","Grid","container","item","xs","Link","RouterLink","changePasswordApi","model","changePasswordModel","from","changeProcess","ForgotPassword","changePassword","left","id","Profile","profileData","profile","newPasswordSet","NewPassword","setNewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","history","useHistory","onClickHandler","useCallback","goBack","s","src","Error404Img","alt","size","onClick","cardPacksApi","generateURL","Object","entries","forEach","el","newURL","slice","get","cardsPack","cardPacks","setCardPacksAC","setCardPacksTC","Main","cards","_id","useState","packName","setPackName","myButtonClicked","setMyButtonClicked","searchValue","setSearchValue","page","setPage","pageCount","setPageCount","sliderValue","setSliderValue","sliderValueForPayload","setSliderValueForPayload","sortPacksDirection","setSortPacksDirection","sortBy","setSortBy","userId","setUserId","useEffect","setValuesInPayload","sortPacks","JSON","stringify","user_id","onClickSortHandler","sortValue","onSearchButtonHandler","onDeleteButtonClick","packId","deletePackTC","Paper","navBar","fontSize","fontWeight","marginBottom","ButtonGroup","Slider","maxCardsCount","onChange","e","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","body","justifyContent","placeholder","target","onKeyPress","key","InputProps","startAdornment","InputAdornment","endAdornment","IconButton","aria-label","marginLeft","name","TableContainer","Table","table","TableHead","TableRow","TableCell","align","TableBody","map","card","scope","cardsCount","updated","user_name","TableFooter","TablePagination","rowsPerPageOptions","cardPacksTotalCount","colSpan","count","rowsPerPage","SelectProps","inputProps","native","labelRowsPerPage","onPageChange","newPage","onRowsPerPageChange","parseInt","ActionsComponent","TablePaginationActions","minHeight","minWidth","borderRadius","useStyles1","createStyles","root","flexShrink","props","useTheme","direction","Math","ceil","Header","login","location","useLocation","pathname","setValue","tab","typo","button","borderColor","marginRight","AppBar","Tabs","centered","Tab","push","icon","DynamicFeedOutlined","AccountCircleOutlined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbd81333.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__2OK93\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const registerApi = {\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, {email, password})\r\n    },\r\n}\r\n\r\n// export type RegisterRequestDataType = {\r\n//     email: string\r\n//     password: string\r\n// }\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseAuthType>(`auth/login`, data)\r\n    },\r\n    me(){\r\n        return instance.post<ResponseAuthType>(`auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type ResponseAuthType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n","import {ResponseAuthType} from \"../dal/auth-api\";\r\n\r\nconst initialState = {} as ProfileStateType\r\nexport type ProfileStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string,\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: ResponseAuthType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\n\r\nexport type ProfileActionsType = SetProfileActionType\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>","import {authApi, LoginParamsType} from '../dal/auth-api';\r\nimport {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n    //profile\r\n\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: LoginActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-SIGN-IN':\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignInAC = (value: boolean) =>\r\n    ({type: 'login/SET-SIGN-IN', value} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.login(data)\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch((setAppStatusAC('succeeded')))\r\n        } catch (err) {\r\n            const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n\r\n    }\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LoginActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\n\r\n","import {authApi} from '../dal/auth-api';\r\nimport {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from \"./profile-reducer\";\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'idle' as RequestStatusType, ///\r\n    isInitialized: false ///is necessary data for all app is requested\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {\r\n                ...state, error: action.error, errorType: action.errorType\r\n            }\r\n        case 'app/SET-APP-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {\r\n                ...state, isInitialized: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (value: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunks\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.me()\r\n            if (res.data) {\r\n                dispatch(setSignInAC(true))\r\n                dispatch(setProfileAC(res.data))\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        } finally {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppErrorType = \"error\" | \"warning\" | \"info\" | \"success\"\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {AppThunk} from './store';\r\nimport {registerApi} from '../dal/register-api';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'register/SET-SIGN-UP':\r\n            return {\r\n                ...state, isRegistered: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignUpAC = () =>\r\n    ({type: 'register/SET-SIGN-UP'} as const)\r\n\r\n\r\n//thunks\r\nexport const setSignUpTC = (email: string, password: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await registerApi.register(email, password)\r\n            dispatch(setSignUpAC())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\n\r\nexport type RegisterActionsType =\r\n    | SetSignUpActionType\r\n    | SetAppErrorActionType","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport React from 'react';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setSignUpTC} from '../../../bll/register-reducer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {RequestStatusType} from '../../../bll/app-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\n\r\nexport const Registration: React.FC = () => {\r\n    console.log('reg')\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    {\r\n                        status === 'loading' &&\r\n                        <CircularProgress style={{position: 'fixed', top: '40%', textAlign: 'center'}}/>\r\n                    }\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n\r\n                        <Button\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}))","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {RequestStatusType} from '../../../bll/app-reducer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\n\r\n//\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\nexport const Login = () => {\r\n    console.log('login')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                // .min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    if (requestStatus === 'loading') {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    // if (isLoggedIn) {\r\n    //     return <Redirect to={'/profile'}/>\r\n    // }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        // autoComplete=\"email\"\r\n                        type=\"email\"\r\n                        // autoFocus\r\n                        // error={!!formik.errors.email}\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        // error={!!formik.errors.password}\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n// API\r\nexport const changePasswordApi = {\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n// Types\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n<!--                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>-->\r\n                        <a href='https://sf-minsk.github.io/team_project/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    changeProcess: false\r\n}\r\n\r\nexport const changePasswordReducer = (state: initialStateType = initialState, action: ChangePasswordActionsType) => {\r\n    switch (action.type) {\r\n        case 'changePassword/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const changePasswordAC = () => {\r\n    return {\r\n        type: 'changePassword/CHANGE-PASSWORD',\r\n    } as const\r\n}\r\n\r\n//THUNK creators\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await changePasswordApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n}\r\n\r\n// Types\r\ntype initialStateType = typeof initialState\r\nexport type ChangePasswordActionsType =\r\n    | ReturnType<typeof changePasswordAC>\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {changePasswordTC} from \"../../../bll/changePassword-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const ForgotPassword = () => {\r\n    console.log('forgot')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.changePassword.changeProcess)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email('Invalid email address').required('Required field'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <ErrorSnackbar/>\r\n                {(status === 'loading') &&\r\n                <div\r\n                    style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                    <CircularProgress/>\r\n                </div>\r\n                }\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            id=\"email\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            // autoComplete=\"email\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {ErrorSnackbar} from \"../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>{`Your e-mail: ${profileData}`}</div>\r\n        </div>\r\n    )\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    newPasswordSet: false\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialStateType = initialState, action: setNewPasswordActionTypes) => {\r\n    switch (action.type) {\r\n        case 'setNewPassword/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nconst setNewPasswordAC = () => {\r\n    return {\r\n        type: 'setNewPassword/SET-NEW-PASSWORD',\r\n    } as const\r\n}\r\n\r\n// THUNK Creators\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await changePasswordApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n\r\n}\r\n\r\n// Types\r\ntype initialStateType = {\r\n    newPasswordSet: boolean\r\n}\r\nexport type setNewPasswordActionTypes =\r\n    | ReturnType<typeof setNewPasswordAC>","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPasswordTC} from \"../../../bll/setNewPassword-reducer\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOpenOutlinedIcon from \"@material-ui/icons/LockOpenOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            {(status === 'loading') &&\r\n            <div\r\n                style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n            }\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"password\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"confirmPassword\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n\r\n    )\r\n}\r\n","import React, {ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}\r\n\r\nexport const PrivateRoute: React.FC<PropsType> = ({render: Component, isLoggedIn, path, redirectTo, exact}) => {\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Error404 = () => {\r\n    console.log('Error404')\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\n// export const cardsPackApi = {\r\n//     fetchPacks(page?: number, pageCount?: number, sortPacks?: 0 | 1, updated?: string, user_id?: string) {\r\n//         return instance.get<CardsPackResponseType>(\r\n//             `/cards/pack?page=${page}&pageCount=${pageCount}&sortPacks=${sortPacks}${updated}&`\r\n//             + (user_id ? `user_id=${user_id}` : ``))\r\n//     },\r\n// }\r\n\r\nexport const cardPacksApi = {\r\n    fetchPacks(payload?: CardPacksRequestDataType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<CardPacksResponseType>(`cards/pack${newURL}`)\r\n    },\r\n    createPack(cardsPack: CardsPackRequestType) {\r\n        return instance.post<CardsPackResponseType>(`cards/pack`, cardsPack)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n}\r\n\r\nexport type CardPacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type CardPacksResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type CardPacksType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\nexport type CardsPackDataType = {\r\n    name?: string | null\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\nexport type CardsPackRequestType = {\r\n    cardsPack: CardsPackDataType\r\n}\r\nexport type CardsPackResponseType = {\r\n    newCardsPack: CardPacksType\r\n    token: string\r\n    tokenDeathTime: number\r\n}","import {AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CardPacksRequestDataType,\r\n    CardPacksResponseType,\r\n    CardPacksType,\r\n    CardsPackRequestType\r\n} from '../dal/cards-api';\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as CardPacksType[]\r\n} as CardPacksResponseType\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const cardsReducer = (state = initialState, action: CardsActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-CARD-PACKS':\r\n            return {\r\n                ...state, ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardPacksAC = (data: CardPacksResponseType) =>\r\n    ({type: 'cards/SET-CARD-PACKS', data} as const)\r\n\r\n\r\n//thunks\r\nexport const setCardPacksTC = (data?: CardPacksRequestDataType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await cardPacksApi.fetchPacks(data)\r\n            dispatch(setCardPacksAC(res.data))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createPackTC = (data: CardsPackRequestType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createPack(data)\r\n            dispatch(setCardPacksTC())\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const deletePackTC = (packId: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deletePack(packId)\r\n            dispatch(setCardPacksTC())\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport\r\ntype SetCardPacksActionType = ReturnType<typeof setCardPacksAC>\r\n\r\nexport type CardsActionsType =\r\n    | SetCardPacksActionType\r\n","import React, {ChangeEvent, KeyboardEvent, MouseEvent, useEffect, useState} from 'react';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded'\r\nimport createStyles from '@material-ui/core/styles/createStyles';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {CardPacksResponseType} from '../../dal/cards-api';\r\nimport {createPackTC, deletePackTC, setCardPacksTC} from '../../bll/cards-reducer';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Theme} from '@material-ui/core/styles/createTheme';\r\nimport {RequestStatusType} from '../../bll/app-reducer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {ProfileStateType} from '../../bll/profile-reducer';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\n\r\n\r\nexport const Main: React.FC = () => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardPacksResponseType>(state => state.cards)\r\n    const profile = useSelector<AppRootStateType, ProfileStateType>(state => state.profile)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const [packName, setPackName] = useState('')\r\n    const [myButtonClicked, setMyButtonClicked] = useState(false)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [page, setPage] = useState(1)\r\n    const [pageCount, setPageCount] = useState(5)\r\n    const [sliderValue, setSliderValue] = useState<number[]>([0, 110])\r\n    const [sliderValueForPayload, setSliderValueForPayload] = useState<number[]>([sliderValue[0], sliderValue[1]])\r\n    const [sortPacksDirection, setSortPacksDirection] = useState(0)\r\n    const [sortBy, setSortBy] = useState<SortByType>('updated')\r\n    const [userId, setUserId] = useState<string>('')\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setCardPacksTC(setValuesInPayload()))\r\n    }, [dispatch, packName, sortPacksDirection, sortBy, page, pageCount, userId, sliderValueForPayload])\r\n\r\n    const setValuesInPayload = () => {\r\n        return {\r\n            packName: packName,\r\n            min: sliderValueForPayload[0],\r\n            max: sliderValueForPayload[1],\r\n            sortPacks: JSON.stringify(sortPacksDirection) + sortBy,\r\n            page: page,\r\n            pageCount: pageCount,\r\n            user_id: userId,\r\n        }\r\n    }\r\n\r\n    const onMyButtonClick = () => {\r\n        setUserId(id)\r\n        setMyButtonClicked(true)\r\n    }\r\n    const onAllButtonClick = () => {\r\n        setUserId('')\r\n        setMyButtonClicked(false)\r\n    }\r\n\r\n    const changeSliderValue = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number[])\r\n    }\r\n    const changeSliderValueForPayload = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValueForPayload(newValue as number[])\r\n    }\r\n\r\n\r\n    const handleChangePage = (e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        setPage(newPage + 1)\r\n    }\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPageCount(parseInt(e.target.value, 10))\r\n    }\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        setSortBy(sortValue)\r\n        if (sortPacksDirection === 0) {\r\n            setSortPacksDirection(1)\r\n        } else {\r\n            setSortPacksDirection(0)\r\n        }\r\n    }\r\n\r\n    const onSearchButtonHandler = () => {\r\n        setPackName(searchValue)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onSearchButtonHandler()\r\n    }\r\n\r\n    const addNewPackHandler = () => {\r\n        dispatch(createPackTC({cardsPack: {name: searchValue}}))\r\n        setSearchValue('')\r\n    }\r\n\r\n    const onDeleteButtonClick = (packId: string) => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Paper className={classes.paper}>\r\n                <Grid className={classes.navBar}>\r\n                    <span style={{fontSize: '20px', fontWeight: 'bold', marginTop: '10px', marginBottom: '10px'}}>Show packs cards</span>\r\n                    <ButtonGroup variant=\"contained\" color=\"primary\" style={{marginTop: '20px'}}>\r\n                        <Button onClick={onMyButtonClick}\r\n                                variant={myButtonClicked ? 'contained' : 'outlined'}>My</Button>\r\n                        <Button onClick={onAllButtonClick}\r\n                                variant={myButtonClicked ? 'outlined' : 'contained'}>All</Button>\r\n                    </ButtonGroup>\r\n                    <Slider\r\n                        style={{marginTop: '50px', width: '150px'}}\r\n                        value={sliderValue}\r\n                        max={cards.maxCardsCount}\r\n                        onChange={changeSliderValue}\r\n                        onChangeCommitted={changeSliderValueForPayload}\r\n                        valueLabelDisplay=\"auto\"\r\n                        aria-labelledby=\"range-slider\"\r\n                        // getAriaValueText={value}\r\n                    />\r\n                </Grid>\r\n                <Container className={classes.body}>\r\n                    <div style={{fontSize: '30px', fontWeight: 'bold'}}>Packs list</div>\r\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n\r\n                        <TextField\r\n                            style={{height: '40px'}}\r\n                            placeholder=\"Search\"\r\n                            type=\"text\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            onChange={e => setSearchValue(e.target.value)}\r\n                            onKeyPress={onKeyPressHandler}\r\n                            value={searchValue}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Button onClick={onSearchButtonHandler}>\r\n                                            <SearchIcon/>\r\n                                        </Button>\r\n                                    </InputAdornment>\r\n                                ),\r\n\r\n                                endAdornment: searchValue && (\r\n                                    <IconButton\r\n                                        style={{height: '40px'}}\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={() => setPackName('')}\r\n                                    >\r\n                                        <CancelRoundedIcon/>\r\n                                    </IconButton>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            style={{width: '230px', marginLeft: '20px'}}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={addNewPackHandler}\r\n                        >\r\n                            Add new pack\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <TableContainer component={Paper}>\r\n                        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell onClick={() => onClickSortHandler('name')}>\r\n                                        <Button variant={sortBy === 'name' ? 'outlined' : 'text'}>\r\n                                            Name\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    <TableCell onClick={() => onClickSortHandler('cardsCount')}\r\n                                               align=\"right\">\r\n                                        <Button variant={sortBy === 'cardsCount' ? 'outlined' : 'text'}>\r\n                                            Cards\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    <TableCell onClick={() => onClickSortHandler('updated')} align=\"right\">\r\n                                        <Button variant={sortBy === 'updated' ? 'outlined' : 'text'}>\r\n                                            Last Updated\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    <TableCell onClick={() => onClickSortHandler('created')} align=\"right\">\r\n                                        <Button variant={sortBy === 'created' ? 'outlined' : 'text'}>\r\n                                            Created By\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">Actions</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {requestStatus === 'loading'\r\n                                    ? <div style={{\r\n                                        display: 'flex',\r\n                                        position: 'absolute',\r\n                                        left: '50%',\r\n                                        top: '50%',\r\n                                        textAlign: 'center',\r\n                                        width: '100%'\r\n                                    }}><CircularProgress/></div>\r\n                                    : cards.cardPacks.map((card) => (\r\n                                            <TableRow key={card._id}>\r\n                                                <TableCell component=\"th\"\r\n                                                           scope=\"row\">{card.name}</TableCell>\r\n                                                <TableCell align=\"right\">{card.cardsCount}</TableCell>\r\n                                                <TableCell align=\"right\">{card.updated}</TableCell>\r\n                                                <TableCell align=\"right\">{card.user_name}</TableCell>\r\n                                                <TableCell align=\"right\">\r\n                                                    {card.user_id === id &&\r\n                                                    <span>\r\n                                                        <Button onClick={() => onDeleteButtonClick(card._id)} size={'small'} color={'secondary'}\r\n                                                                variant={'outlined'}>Delete</Button>\r\n                                                        <Button size={'small'} variant={'outlined'}\r\n                                                                style={{margin: '0 10px'}}>Edit</Button>\r\n                                                    </span>\r\n                                                    }\r\n                                                    <span><Button size={'small'}\r\n                                                                  variant={'outlined'}>Learn</Button></span>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </TableBody>\r\n                            <TableFooter>\r\n                                <TableRow>\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        height: '53px',\r\n                                        marginLeft: '10px',\r\n                                        alignItems: 'center'\r\n                                    }}>\r\n                                        Page: {page}\r\n                                    </div>\r\n                                    <TablePagination\r\n                                        rowsPerPageOptions={[5, 10, 25, {\r\n                                            label: 'All',\r\n                                            value: cards.cardPacksTotalCount\r\n                                        }]}\r\n                                        colSpan={6}\r\n                                        count={cards.cardPacksTotalCount}\r\n                                        rowsPerPage={pageCount}\r\n                                        page={page - 1}\r\n                                        SelectProps={{\r\n                                            inputProps: {'aria-label': 'rows per page'},\r\n                                            native: true,\r\n                                        }}\r\n                                        labelRowsPerPage={'Cards per Page'}\r\n                                        onPageChange={handleChangePage}\r\n                                        onRowsPerPageChange={handleChangePageCount}\r\n                                        ActionsComponent={TablePaginationActions}\r\n                                    />\r\n                                </TableRow>\r\n                            </TableFooter>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n}\r\n\r\ntype SortByType = 'name' | 'cardsCount' | 'updated' | 'created'\r\nconst useStyles = makeStyles(() => ({\r\n    paper: {\r\n        marginTop: '20px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        minHeight: '800px',\r\n        minWidth: '1000px',\r\n    },\r\n    navBar: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        width: '240px',\r\n        backgroundColor: 'lightblue',\r\n        borderRadius: '4px 0px 0px 4px',\r\n    },\r\n    body: {\r\n        margin: '10px 15px 10px 15px',\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n}))\r\n\r\n\r\ntype TablePaginationActionsProps = {\r\n    count: number\r\n    rowsPerPage: number\r\n    page: number\r\n    onPageChange: (e: MouseEvent<HTMLButtonElement>, newPage: number) => void\r\n}\r\n\r\nconst useStyles1 = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexShrink: 0,\r\n            marginLeft: theme.spacing(2.5),\r\n        },\r\n    }),\r\n)\r\n\r\nexport const TablePaginationActions = (props: TablePaginationActionsProps) => {\r\n\r\n    const classes = useStyles1()\r\n    const theme = useTheme()\r\n    const {count, rowsPerPage, page, onPageChange} = props\r\n\r\n    const handleFirstPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\n\r\nimport {AppBar, Tab, Tabs} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport {logoutTC} from \"../../bll/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {AccountCircleOutlined, DynamicFeedOutlined} from \"@material-ui/icons\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\n\r\n\r\nexport const Header = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    let history = useHistory()\r\n    let location = useLocation()\r\n    useEffect(() => {\r\n        if (location.pathname === '/') {\r\n            setValue(0)\r\n        } else {\r\n            setValue(1)\r\n        }\r\n    }, [location])\r\n    let [value, setValue] = useState(0)\r\n    const onPacksClickHandler = () => {\r\n        setValue(0)\r\n        history.push('/')\r\n    }\r\n    const onProfileClickHndler = () => {\r\n        setValue(1)\r\n        history.push('/Profile')\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    const classes = makeStyles(() => ({\r\n        app: {\r\n            flexDirection: 'row',\r\n            display: 'flex',\r\n            height: '72px',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n        },\r\n        tab: {},\r\n        typo: {\r\n            marginLeft: '10px',\r\n        },\r\n        button: {\r\n            color: 'white',\r\n            borderColor: 'white',\r\n            marginRight: '10px',\r\n        },\r\n    }))();\r\n\r\n    return <>\r\n        <AppBar className={classes.app} position=\"static\">\r\n\r\n            <Typography className={classes.typo} variant={\"h6\"}>\r\n                CARDS\r\n            </Typography>\r\n            {isLoggedIn ?\r\n                <>\r\n                    <Tabs className={classes.tab}\r\n                          value={value}\r\n                          centered\r\n                    >\r\n                        <Tab onClick={onPacksClickHandler} label={'Packs List'} icon={<DynamicFeedOutlined/>}/>\r\n                        <Tab onClick={onProfileClickHndler} label={'Profile'} icon={<AccountCircleOutlined/>}/>\r\n                    </Tabs>\r\n                    <Button className={classes.button} onClick={obLogOutClick}\r\n                            variant=\"outlined\"\r\n                    >\r\n                        LOGOUT\r\n                    </Button>\r\n                </> : null\r\n            }\r\n        </AppBar>\r\n    </>\r\n}","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Registration} from './components/auth/registration/Registration';\r\nimport {Login} from './components/auth/login/Login';\r\nimport {ForgotPassword} from './components/auth/forgotPassword/ForgotPassword';\r\nimport {Profile} from \"./components/profile/Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./bll/store\";\r\nimport {initializeAppTC} from \"./bll/app-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {NewPassword} from \"./components/auth/forgotPassword/NewPassword\";\r\nimport {logoutTC} from \"./bll/auth-reducer\";\r\nimport { PrivateRoute } from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\nimport {Main} from './components/main/Main';\r\nimport {Header} from './components/header/Header';\r\n\r\nfunction App() {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button><NavLink to='/'>Home</NavLink></button>\r\n                <button><NavLink to='/'>Main</NavLink></button>\r\n                <button><NavLink to='/registration'>Register</NavLink></button>\r\n                <button><NavLink to='/login'>Login</NavLink></button>\r\n                <button><NavLink to='/changepassword'>Change Password</NavLink></button>\r\n                <button><NavLink to='/profile'>Profile</NavLink></button>\r\n                <span style={{color: `${isInitialized ? 'green' : 'red'}`}}> (INITIALIZED) </span>\r\n                <span style={{color: `${isLoggedIn ? 'green' : 'red'}`}}> (LOGIN) </span>\r\n                <span style={{color: `${isRegistered ? 'green' : 'red'}`}}> (REGISTERED) </span>\r\n                <button onClick={obLogOutClick}>LOGOUT</button>\r\n            </div>\r\n\r\n            <Header/>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <Main/>} redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>} redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>} redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>} redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// <Route path=\"/admin\" render={ () => (isAuth ? ( <> <Route path=\"/admin/categories\" component={() => <CategoriesAdmin setStore={setStore} store={store} setAppSide={setAppSide} />} /> <Route path=\"/admin/words/:id\" component={() => <Words setStore={setStore} store={store} setAppSide={setAppSide} />} /> </> ) : <Redirect to={'/main'}/>)} />","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, LoginActionsType} from './auth-reducer';\r\nimport {RegisterActionsType, registerReducer} from './register-reducer';\r\nimport {ChangePasswordActionsType, changePasswordReducer} from './changePassword-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {setNewPasswordActionTypes, setNewPasswordReducer} from './setNewPassword-reducer';\r\nimport {CardsActionsType, cardsReducer} from './cards-reducer';\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    login: authReducer,\r\n    register: registerReducer,\r\n    changePassword: changePasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    cards: cardsReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | LoginActionsType\r\n    | RegisterActionsType\r\n    | ChangePasswordActionsType\r\n    | setNewPasswordActionTypes\r\n    | AppActionsType\r\n    | CardsActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}