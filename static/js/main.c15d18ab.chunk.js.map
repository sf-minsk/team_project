{"version":3,"sources":["components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.module.css","features/error404/Error404.module.css","components/main/commonComponents/TablePagination.module.css","components/main/commonComponents/modal/ModalWindow.module.css","components/main/packsList/packs/NavBar.module.css","components/main/packsList/packs/PacksListTable.module.css","bll/profile-reducer.ts","dal/api.ts","utils/changePasswordModel-util.ts","bll/auth-reducer.ts","bll/app-reducer.ts","features/errors/ErrorSnackbar.tsx","components/main/styles.ts","components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.tsx","components/auth/Registration.tsx","components/auth/Login.tsx","components/auth/ForgotPassword.tsx","components/profile/Profile.tsx","components/auth/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","components/header/Header.tsx","components/main/commonComponents/Input.tsx","utils/cardsApiModel-util.ts","bll/cards-reducer.ts","utils/trimmedString-util.ts","utils/updateDate-util.ts","components/main/commonComponents/TablePagination.tsx","components/main/commonComponents/modal/editCardModal/EditCardModal.tsx","components/main/cards/cards/CardsTableActions.tsx","components/main/cards/cards/CardsTable.tsx","utils/localStorage-util.ts","components/main/commonComponents/modal/addCardModal/AddCardModal.tsx","components/main/cards/Cards.tsx","bll/packs-reducer.ts","components/main/packsList/packs/NavBar.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalAnswer.tsx","bll/learn-reducer.ts","components/main/commonComponents/modal/editPackModal/EditPackModal.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalQuestion.tsx","components/main/packsList/packs/PacksListTable.tsx","components/main/commonComponents/modal/addPackModal/AddPackModal.tsx","components/main/packsList/PacksList.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","components/main/cards/Cards.module.css"],"names":["module","exports","initialState","setProfileAC","data","type","payload","instance","axios","create","baseURL","withCredentials","authApi","post","delete","email","password","model","cardPacksApi","generateURL","Object","entries","forEach","el","newURL","slice","get","pack","id","put","cardsPack","card","changePasswordModel","from","message","isLoggedIn","isRegistered","changeProcess","newPasswordSet","setSignInAC","logoutTC","dispatch","a","setAppStatusAC","error","errorType","status","isInitialized","setAppErrorAC","ErrorSnackbar","React","memo","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","useStyles","makeStyles","theme","authPaper","marginTop","spacing","display","flexDirection","alignItems","authAvatar","margin","backgroundColor","palette","secondary","main","authForm","width","authSubmit","authTextFieldStyle","height","headerApp","position","justifyContent","headerTypo","marginLeft","headerLogoutButton","color","borderColor","marginRight","table","minWidth","tableHead","packsListTableBodyNavLink","textDecoration","packsListTableBodyActionsSection","footerPage","addNewPackButton","input","navbar","maxWidth","borderRadius","navbarShowPacksCards","fontSize","fontWeight","marginBottom","navbarMyAllButtons","container","padding","paper","minHeight","body","addNewCardButton","packsCardsFooter","actionsButtonOfCards","containerActionsButton","showAnswerButton","optionsForRateYourself","nextQuestionButton","questionInput","answerInput","addNewCardModalButton","addEditPackInput","ProgressModalComponent","appStatus","className","s","progressContainer","progressDiv","CircularProgress","Registration","classes","auth","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","response","resetForm","to","Container","component","CssBaseline","Avatar","Typography","variant","handleSubmit","noValidate","TextField","fullWidth","label","autoFocus","helperText","touched","errors","getFieldProps","Button","disabled","isValid","Grid","item","Link","RouterLink","Login","rememberMe","res","FormControlLabel","control","Checkbox","value","xs","ForgotPassword","Profile","profileData","profile","NewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","history","useHistory","onClickHandler","useCallback","goBack","src","Error404Img","alt","size","onClick","Header","location","useLocation","useState","setValue","useEffect","pathname","AppBar","Tabs","centered","Tab","push","icon","DynamicFeedOutlined","AccountCircleOutlined","Input","props","placeholderValue","dispatchHandler","onChangeHandler","e","target","placeholder","onChange","packsApiModel","packs","apiModel","packName","sortPacks","JSON","stringify","sortPacksDirection","sortBy","page","pageCount","user_id","cardsApiModel","cards","cardAnswer","cardQuestion","cardsPack_id","sortCards","sortCardDirection","cardsTotalCount","minGrade","maxGrade","packUserId","currentPackName","searchTextAnswer","searchTexQuestion","setPackAC","setPackTC","getState","newPackApiModel","pastPageCount","currentPage","currentPageCount","newPage","Math","floor","trimmedString","str","number","length","substring","updateDate","cardUpdateDate","Date","toLocaleString","year","month","day","TablePaginationActions","count","rowsPerPage","onPageChange","useTheme","root","IconButton","aria-label","direction","ceil","EditCardModal","closeAddPackModal","editCard","question","setQuestion","answer","setAnswer","darkWindow","windowByAddEditCard","currentTarget","_id","CardsTableActions","deleteCard","editPackModal","setEditPackModal","closeEditPackModal","TableCell","align","CardsTable","labelRowsPerPage","idUser","packID","handleChangePage","editCardHandler","editCardTC","onClickSortHandler","sortValue","deleteCardHandler","cardId","deleteCardTC","Table","TableHead","TableRow","TableSortLabel","active","TableBody","map","updated","round","grade","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","onRowsPerPageChange","parseInt","ActionsComponent","loadState","serializedState","localStorage","getItem","parse","err","saveState","prevState","setItem","AddCardModal","addNewCard","Cards","setCardQuestion","setCardAnswer","intervalId","setIntervalId","addPackModal","setAddPackModal","cardPacks","filter","name","searchQuestionHandler","clearInterval","newIntervalID","setTimeout","searchAnswerHandler","Paper","arrowBackToPacks","titleBackToPacks","packListHeading","inputButtonSection","TableContainer","myPacks","minCardsCount","maxCardsCount","searchText","cardPacksTotalCount","setCardPacksAC","setCardPacksTC","newCardsApiModel","NavBar","sliderValue","setSliderValue","ButtonGroup","slider","Slider","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","LearnCardsModalAnswer","openNextRandomCard","closeAllModal","setGrade","windowByAnswer","nameOfPack","randomQuestionAndAnswer","FormGroup","valueOfGrade","title","i","Radio","checked","checkedValue","labelPlacement","setCardsOfPackAC","fetchCardsOfPackTC","cardsOfPackApiModel","EditPackModal","oldName","updatePackName","newName","setNewName","windowByAddPack","LearnCardsModalQuestion","onAnswerButtonClick","windowByQuestion","PacksListTable","cardsForLearn","editPackData","setEditPackData","learnCardsModalQuestion","setLearnCardsModalQuestion","learnCardsModalAnswer","setLearnCardsModalAnswer","randomCard","setRandomCard","setName","cardsCount","setCardsCount","sumOfRepeats","reduce","acc","random","sum","getCard","fetchAnswerQuestion","card_id","updatedGrade","updatePackTC","onDeleteButtonClickHandler","packId","cardsState","remainPacks","deletePackTC","startLearning","user_name","style","openEditPackModal","AddPackModal","addNewPack","text","setText","PacksList","setSearchText","intervalID","setIntervalID","newPackName","searchInputHandler","App","top","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Number","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c15d18ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainer\":\"ProgressModalComponent_progressContainer__2dWCq\",\"progressDiv\":\"ProgressModalComponent_progressDiv__3yXXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__7WsmL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TablePagination_root__2oWeH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkWindow\":\"ModalWindow_darkWindow__4x54u\",\"windowByQuestion\":\"ModalWindow_windowByQuestion__1eyek\",\"nameOfPack\":\"ModalWindow_nameOfPack__1eb2X\",\"randomQuestionAndAnswer\":\"ModalWindow_randomQuestionAndAnswer__1zdXl\",\"windowByAnswer\":\"ModalWindow_windowByAnswer__17Og9\",\"windowByAddEditCard\":\"ModalWindow_windowByAddEditCard__S0M8z\",\"windowByAddPack\":\"ModalWindow_windowByAddPack___HM6H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"NavBar_slider__3vaEQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerPage\":\"PacksListTable_footerPage__2pUO3\"};","import {AuthResponseType} from '../dal/api';\r\n\r\nconst initialState = {} as ProfileStateType\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: AuthResponseType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\nexport type ProfileStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string,\r\n}\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>\r\n\r\nexport type ProfileActionsType =\r\n    | SetProfileActionType","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<AuthResponseType>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.post<AuthResponseType>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, {email, password})\r\n    },\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n\r\nexport const cardPacksApi = {\r\n    fetchPacks(payload?: PacksRequestDataType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PacksResponseType>(`cards/pack${newURL}`)\r\n    },\r\n    createPack(pack: CreatePackRequestType) {\r\n        return instance.post(`cards/pack`, pack)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePackRequestType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    fetchPack(payload: CardsRequestType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PackResponseType>(`/cards/card${newURL}`)\r\n    },\r\n    createCard(data: CreateCardType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    editCard(data: EditCardRequestType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    },\r\n    updatedGrade(payload: GradeRequestType) {\r\n        return instance.put<GradeResponseType>(`/cards/grade`, payload)\r\n    },\r\n}\r\n\r\n//login type\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n//register type\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}\r\n//change password type\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\n\r\n//get packs type\r\nexport type PacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<PacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type PacksType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\n//create cards type\r\nexport type CreatePackRequestType = {\r\n    cardsPack: PackDataType\r\n}\r\nexport type PackDataType = {\r\n    name?: string | null\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\n//update cards type\r\nexport type UpdatePackRequestType = {\r\n    _id: string,\r\n    name?: string,\r\n}\r\n\r\n//get cards type\r\nexport type CardsRequestType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type PackResponseType = {\r\n    cards: Array<OnePackType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type OnePackType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n//create card type\r\nexport type CreateCardType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type EditCardRequestType = CreateCardType & {\r\n    _id: string\r\n}\r\n\r\n//update grade\r\nexport type GradeRequestType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\nexport type GradeResponseType = {\r\n    updatedGrade: GradeDataType\r\n}\r\nexport type GradeDataType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n<!--                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>-->\r\n                        <a href='https://MartaVeresova.github.io/card_training/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\nimport {authApi, LoginParamsType} from '../dal/api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isRegistered: false,\r\n    changeProcess: false,\r\n    newPasswordSet: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'auth/SET-SIGN-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        case 'auth/SET-SIGN-UP':\r\n            return {...state, isRegistered: true}\r\n\r\n        case 'auth/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n\r\n        case 'auth/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignInAC = (isLoggedIn: boolean) =>\r\n    ({type: 'auth/SET-SIGN-IN', isLoggedIn} as const)\r\n\r\nexport const setSignUpAC = () =>\r\n    ({type: 'auth/SET-SIGN-UP'} as const)\r\n\r\nexport const changePasswordAC = () =>\r\n    ({type: 'auth/CHANGE-PASSWORD'} as const)\r\n\r\nexport const setNewPasswordAC = () =>\r\n    ({type: 'auth/SET-NEW-PASSWORD'} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.login(data)\r\n        dispatch(setProfileAC(res.data))\r\n        dispatch(setSignInAC(true))\r\n    } catch (err) {\r\n        const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n        dispatch(setAppErrorAC(error))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const setSignUpTC = (email: string, password: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.register(email, password)\r\n        dispatch(setSignUpAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\n\r\n\r\n//types\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\nexport type ChangePasswordActionsType = ReturnType<typeof changePasswordAC>\r\nexport type SetNewPasswordActionTypes = ReturnType<typeof setNewPasswordAC>\r\n\r\nexport type AuthActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetSignUpActionType\r\n    | ChangePasswordActionsType\r\n    | SetNewPasswordActionTypes\r\n\r\n\r\n\r\n","import {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from './profile-reducer';\r\nimport {authApi} from '../dal/api';\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'succeeded' as AppStatusType,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {...state, error: action.error, errorType: action.errorType}\r\n\r\n        case 'app/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.me()\r\n        if (res.data) {\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch(setProfileAC(res.data))\r\n        }\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type AppStatusType = 'loading' | 'succeeded'\r\nexport type AppErrorType = 'error' | 'warning' | 'info' | 'success'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | SetIsInitializedActionType\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport React from 'react';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {Alert} from '@material-ui/lab';\r\n\r\n\r\nexport const ErrorSnackbar: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n})","import makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {Theme} from '@material-ui/core/styles/createTheme';\r\n\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => ({\r\n\r\n//login, registration, change password\r\n    authPaper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    authAvatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    authForm: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    authSubmit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    authTextFieldStyle: {\r\n        height: '65px',\r\n    },\r\n//header\r\n    headerApp: {\r\n        position: 'static',\r\n        flexDirection: 'row',\r\n        display: 'flex',\r\n        height: '72px',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    headerTypo: {\r\n        marginLeft: '10px',\r\n    },\r\n    headerLogoutButton: {\r\n        color: 'white',\r\n        borderColor: 'white',\r\n        marginRight: '10px',\r\n    },\r\n//PacksListTable / CardsTable\r\n    table: {\r\n        minWidth: '700px',\r\n    },\r\n    tableHead: {\r\n        backgroundColor: 'lightblue',\r\n    },\r\n    packsListTableBodyNavLink: {\r\n        textDecoration: 'none',\r\n        color: 'black'\r\n    },\r\n    packsListTableBodyActionsSection: {\r\n        display: 'flex',\r\n        width: '224px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    footerPage: {\r\n        display: 'flex',\r\n        height: '53px',\r\n        marginLeft: '10px',\r\n        alignItems: 'center',\r\n    },\r\n//PacksList\r\n    addNewPackButton: {\r\n        width: '230px',\r\n        marginLeft: '20px',\r\n    },\r\n//input\r\n    input: {\r\n        height: '40px',\r\n        marginRight: '15px'\r\n    },\r\n//Navbar\r\n    navbar: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxWidth: '200px',\r\n        minWidth: '200px',\r\n        backgroundColor: 'lightblue',\r\n        borderRadius: '4px 0px 0px 4px',\r\n    },\r\n    navbarShowPacksCards: {\r\n        fontSize: '20px',\r\n        fontWeight: 'bold',\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n    },\r\n    navbarMyAllButtons: {\r\n        marginTop: '20px',\r\n    },\r\n//cards\r\n    container: {\r\n        padding: '0 12px',\r\n    },\r\n    paper: {\r\n        marginTop: '20px',\r\n        marginBottom: '60px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        minHeight: '600px',\r\n        minWidth: '1000px',\r\n    },\r\n    body: {\r\n        margin: '10px 12px',\r\n        padding: '0 12px',\r\n    },\r\n    addNewCardButton: {\r\n        width: '330px',\r\n    },\r\n    packsCardsFooter: {\r\n        marginTop: '20px',\r\n    },\r\n//cardsTableActions\r\n    actionsButtonOfCards: {\r\n        marginRight: '10px',\r\n    },\r\n    containerActionsButton: {\r\n        width: '166px',\r\n        padding: '16px 0',\r\n    },\r\n//learnCardsModalQuestion\r\n    showAnswerButton: {\r\n        margin: '30px auto 0',\r\n        width: '160px',\r\n    },\r\n//learnCardsModalAnswer\r\n    optionsForRateYourself: {\r\n        margin: '5px 30px',\r\n        display: 'inline-flex',\r\n    },\r\n    nextQuestionButton: {\r\n        margin: '30px auto 0',\r\n        width: '100px',\r\n    },\r\n//AddCardModal\r\n    questionInput: {\r\n        width: '450px',\r\n    },\r\n    answerInput: {\r\n        width: '450px',\r\n        marginTop: '30px',\r\n    },\r\n    addNewCardModalButton: {\r\n        width: '150px',\r\n        marginTop: '20px',\r\n    },\r\n//AddPackModal\r\n    addEditPackInput: {\r\n        margin: '30px 0 50px 0',\r\n    },\r\n}))","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport s from './ProgressModalComponent.module.css'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../../bll/store';\r\nimport {AppStatusType} from '../../../../../bll/app-reducer';\r\n\r\n\r\nexport const ProgressModalComponent: React.FC = React.memo(() => {\r\n\r\n    const appStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    return <>\r\n        {\r\n            appStatus === 'loading' &&\r\n            <div className={s.progressContainer}>\r\n                <div className={s.progressDiv}>\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n        }\r\n    </>\r\n})","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport {Link as RouterLink, Redirect} from 'react-router-dom';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {setSignUpTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Registration: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.authForm} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link component={RouterLink} to=\"/login\">\r\n                                    Do have an account? Sign In\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n})","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Login: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                //.min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        type=\"email\"\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {changePasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const ForgotPassword: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.auth.changeProcess)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <ErrorSnackbar/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n})","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\n\r\n\r\nexport const Profile: React.FC = React.memo(() => {\r\n\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>Your e-mail: {profileData}</div>\r\n        </>\r\n    )\r\n})","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {setNewPasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const NewPassword: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.auth.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n})\r\n","import React, {ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\n\r\nexport const PrivateRoute: React.FC<PropsType> = React.memo(({render: Component, isLoggedIn, path, redirectTo}) => {\r\n\r\n\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nexport const Error404: React.FC = React.memo(() => {\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n})","import React, {useEffect, useState} from 'react';\r\nimport {AppBar, Tab, Tabs} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport {logoutTC} from '../../bll/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AccountCircleOutlined, DynamicFeedOutlined} from '@material-ui/icons';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {useStyles} from '../main/styles';\r\n\r\n\r\nexport const Header: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/profile') {\r\n            setValue(1)\r\n        } else {\r\n            setValue(0)\r\n        }\r\n    }, [location, value])\r\n\r\n\r\n    const onPacksClickHandler = () => {\r\n        setValue(0)\r\n        history.push('/')\r\n    }\r\n    const onProfileClickHandler = () => {\r\n        setValue(1)\r\n        history.push('/profile')\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return <>\r\n        <AppBar className={classes.headerApp}>\r\n            <Typography className={classes.headerTypo} variant={'h6'}>\r\n                CARDS\r\n            </Typography>\r\n            {\r\n                isLoggedIn ?\r\n                    <>\r\n                        <Tabs\r\n                            value={value}\r\n                            centered\r\n                        >\r\n                            <Tab onClick={onPacksClickHandler}\r\n                                 label={'Packs List'}\r\n                                 icon={<DynamicFeedOutlined/>}/>\r\n                            <Tab onClick={onProfileClickHandler}\r\n                                 label={'Profile'}\r\n                                 icon={<AccountCircleOutlined/>}/>\r\n                        </Tabs>\r\n                        <Button className={classes.headerLogoutButton}\r\n                                onClick={obLogOutClick}\r\n                                variant=\"outlined\"\r\n                        >\r\n                            LOGOUT\r\n                        </Button>\r\n                    </> : null\r\n            }\r\n        </AppBar>\r\n    </>\r\n})","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {useStyles} from '../styles';\r\n\r\n\r\nexport const Input = React.memo(function (props: InputSearchPropsType) {\r\n\r\n    const {placeholderValue, value, dispatchHandler} = props\r\n    const classes = useStyles()\r\n\r\n    const onChangeHandler = async (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatchHandler(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <TextField\r\n            className={classes.input}\r\n            placeholder={placeholderValue ? placeholderValue : 'Search'}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n            onChange={onChangeHandler}\r\n            value={value}\r\n        />\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype InputSearchPropsType = {\r\n    placeholderValue: string\r\n    value: string\r\n    dispatchHandler: (value: string) => void\r\n}","import {CardsRequestType, PacksRequestDataType} from '../dal/api';\r\nimport {PacksInitialStateType} from \"../bll/packs-reducer\";\r\nimport {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const packsApiModel = (packs: PacksInitialStateType, data?: PacksRequestDataType) => {\r\n    const apiModel = {\r\n        packName: packs.packName,\r\n        min: packs.min,\r\n        max: packs.max,\r\n        sortPacks: JSON.stringify(packs.sortPacksDirection) + packs.sortBy,\r\n        page: packs.page,\r\n        pageCount: packs.pageCount,\r\n        user_id: packs.user_id,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\nexport const cardsApiModel = (cards: CardsInitialStateType, data?: CardsRequestType) => {\r\n    const apiModel = {\r\n        cardAnswer: cards.cardAnswer,\r\n        cardQuestion: cards.cardQuestion,\r\n        cardsPack_id: cards.cardsPack_id,\r\n        min: cards.min,\r\n        max: cards.max,\r\n        sortCards: JSON.stringify(cards.sortCardDirection) + cards.sortBy,\r\n        page: cards.page,\r\n        pageCount: cards.pageCount,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\n","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CreateCardType,\r\n    EditCardRequestType,\r\n    OnePackType,\r\n    CardsRequestType,\r\n    PackResponseType\r\n} from '../dal/api';\r\nimport {cardsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<OnePackType>,\r\n    cardsTotalCount: 1,\r\n    minGrade: 0,\r\n    maxGrade: 5,\r\n    page: 1,\r\n    pageCount: 5,\r\n    packUserId: '',\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    min: 0,\r\n    max: 5,\r\n    sortCardDirection: 0,\r\n    sortBy: 'updated',\r\n    cardsPack_id: '',\r\n    currentPackName: 'Pack name',\r\n    searchTextAnswer: '',\r\n    searchTexQuestion: '',\r\n} as CardsInitialStateType\r\n\r\n\r\nexport const cardsReducer = (state = initialState, action: PackActionsType): CardsInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-PACK':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                sortBy: action.data.sortCards.slice(1),\r\n                sortCardDirection: Number(action.data.sortCards.substring(0, 1)),\r\n                searchTextAnswer: action.data.cardAnswer,\r\n                searchTexQuestion: action.data.cardQuestion,\r\n            }\r\n\r\n        case 'cards/RESET-PACK':\r\n            return {\r\n                ...state,\r\n                cards: [],\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPackAC = (data: PackResponseType & NewPackApiModelType) =>\r\n    ({type: 'cards/SET-PACK', data} as const)\r\nexport const resetPackAC = () =>\r\n    ({type: 'cards/RESET-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const setPackTC = (data: CardsRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newPackApiModel = cardsApiModel(getState().cards, data)\r\n        const pastPageCount = getState().cards.pageCount\r\n        const currentPage = getState().cards.page\r\n        const currentPageCount = newPackApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newPackApiModel.page\r\n        try {\r\n            const res = await cardPacksApi.fetchPack({...newPackApiModel, page: newPage})\r\n            dispatch(setPackAC({...res.data, ...newPackApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createCardTC = (data: CreateCardType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id, page: 1, sortCards: '0updated',}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const deleteCardTC = (cardsPack_id: string, cardId: string): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deleteCard(cardId)\r\n            dispatch(setPackTC({cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const editCardTC = (data: EditCardRequestType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.editCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\n//types\r\nexport type CardsInitialStateType = PackResponseType & {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    min: number\r\n    max: number\r\n    sortCardDirection: number\r\n    sortBy: string\r\n    cardsPack_id: string\r\n    currentPackName: string\r\n    searchTextAnswer: string\r\n    searchTexQuestion: string\r\n}\r\ntype NewPackApiModelType = {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    cardsPack_id: string\r\n    min: number\r\n    max: number\r\n    sortCards: string\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type SetPackActionType = ReturnType<typeof setPackAC>\r\nexport type resetPackActionType = ReturnType<typeof resetPackAC>\r\n\r\nexport type PackActionsType =\r\n    | SetPackActionType\r\n    | resetPackActionType","export const trimmedString = (str: string, number: number) => {\r\n    if (str.length > number) {\r\n        return str.substring(0, number) + '...'\r\n    } else {\r\n        return str\r\n    }\r\n}","export const updateDate = (cardUpdateDate: string) => {\r\n    let formattedDate = new Date(cardUpdateDate)\r\n    return formattedDate.toLocaleString('es', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: 'numeric',\r\n    })\r\n}","import useTheme from '@material-ui/core/styles/useTheme';\r\nimport React, {MouseEvent} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport s from './TablePagination.module.css'\r\n\r\n\r\nexport const TablePaginationActions = React.memo((props: TablePaginationActionsProps) => {\r\n\r\n    const {count, rowsPerPage, page, onPageChange} = props\r\n    const theme = useTheme()\r\n\r\n    const handleFirstPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={s.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype TablePaginationActionsProps = {\r\n    count: number\r\n    rowsPerPage: number\r\n    page: number\r\n    onPageChange: (e: MouseEvent<HTMLButtonElement>, newPage: number) => void\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {EditCardRequestType, OnePackType} from '../../../../../dal/api';\r\nimport s from '../ModalWindow.module.css'\r\nimport {useStyles} from '../../../styles';\r\n\r\n\r\nexport const EditCardModal = React.memo(({closeAddPackModal, card, editCard}: EditPackModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState(card.question)\r\n    const [answer, setAnswer] = useState(card.answer)\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        editCard({cardsPack_id: card.cardsPack_id, _id: card._id, answer, question})\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditCard}>\r\n                <h2>Edit card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={onButtonClickHandler}>Save changes</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype EditPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}","import React, {useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {EditCardModal} from '../../commonComponents/modal/editCardModal/EditCardModal';\r\nimport {EditCardRequestType, OnePackType} from '../../../../dal/api';\r\nimport {useStyles} from '../../styles';\r\n\r\n\r\nexport const CardsTableActions = React.memo((props: PackTableActionsPropsType) => {\r\n\r\n    const {deleteCard, editCard, card} = props\r\n\r\n    const classes = useStyles()\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const onDeleteButtonClick = () => {\r\n        deleteCard(card._id)\r\n    }\r\n    const openEditPackModal = () => {\r\n        setEditPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <TableCell align=\"right\" className={classes.containerActionsButton}>\r\n            {\r\n                editPackModal &&\r\n                <EditCardModal closeAddPackModal={closeEditPackModal}\r\n                               editCard={editCard}\r\n                               card={card}/>\r\n            }\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={onDeleteButtonClick}\r\n            >DELETE</Button>\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={openEditPackModal}\r\n            >EDIT</Button>\r\n        </TableCell>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype PackTableActionsPropsType = {\r\n    deleteCard: (cardId: string) => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}","import TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport React, {ChangeEvent, MouseEvent, useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {useStyles} from '../../styles';\r\nimport {CardsInitialStateType, deleteCardTC, editCardTC, resetPackAC, setPackTC} from '../../../../bll/cards-reducer';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Table from '@material-ui/core/Table';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {CardsTableActions} from './CardsTableActions';\r\nimport {EditCardRequestType} from '../../../../dal/api';\r\nimport {TableSortLabel} from '@material-ui/core';\r\nimport s from '../Cards.module.css'\r\n\r\n\r\nexport const CardsTable = React.memo(({labelRowsPerPage}: PackNameTableProps) => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packID = useLocation().pathname.substring(6)\r\n\r\n\r\n    useEffect(() => {\r\n        return function () {\r\n            dispatch(resetPackAC())\r\n        }\r\n    }, [dispatch])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: newPage + 1}))\r\n    }, [dispatch, packID])\r\n\r\n    const editCardHandler = useCallback((data: EditCardRequestType) => {\r\n        dispatch(editCardTC({...data}))\r\n    }, [])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (cards.sortCardDirection === 0) {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCardTC(cards.cardsPack_id, cardId))\r\n    }, [])\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, pageCount: parseInt(e.target.value, 10)}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n            <TableHead className={classes.tableHead}>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'question'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('question')}\r\n                        >\r\n                            Question\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'answer'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('answer')}\r\n                        >\r\n                            Answer\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'updated'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('updated')}\r\n                        >\r\n                            Last Updated\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'grade'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('grade')}\r\n                        >\r\n                            Grade\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Actions\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    cards.cards.map((cards) =>\r\n                        <TableRow key={cards._id}>\r\n                            <TableCell component=\"th\">{trimmedString(cards.question, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{trimmedString(cards.answer, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{updateDate(cards.updated)}</TableCell>\r\n                            <TableCell align=\"right\">{Math.round(cards.grade)}</TableCell>\r\n                            {cards.user_id === idUser ?\r\n                                <CardsTableActions\r\n                                    deleteCard={deleteCardHandler}\r\n                                    editCard={editCardHandler}\r\n                                    card={cards}\r\n                                />\r\n                                : <TableCell/>}\r\n                        </TableRow>\r\n                    )}\r\n            </TableBody>\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <td className={s.footerPage}>\r\n                        Page: {cards.page} (Total:{Math.ceil(cards.cardsTotalCount / cards.pageCount)})\r\n                    </td>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25, {\r\n                            label: 'All',\r\n                            value: cards.cardsTotalCount\r\n                        }]}\r\n                        colSpan={6}\r\n                        count={cards.cardsTotalCount}\r\n                        rowsPerPage={cards.pageCount}\r\n                        page={cards.page - 1}\r\n                        SelectProps={{\r\n                            inputProps: {'aria-label': 'rows per page'},\r\n                            native: true,\r\n                        }}\r\n                        labelRowsPerPage={labelRowsPerPage}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangePageCount}\r\n                        ActionsComponent={TablePaginationActions}\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        </Table>\r\n    )\r\n})\r\n\r\ntype SortByType = 'question' | 'answer' | 'updated' | 'grade'\r\ntype PackNameTableProps = {\r\n    labelRowsPerPage: string\r\n}","import {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('team_project');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: localStorageStateType) => {\r\n    const prevState = loadState()\r\n    try {\r\n        const serializedState = JSON.stringify({...prevState, ...state});\r\n        localStorage.setItem('team_project', serializedState);\r\n    } catch {\r\n\r\n    }\r\n};\r\n\r\n//types\r\ntype PacksLocalStorageType = {\r\n    packs: {\r\n        cardPacks: []\r\n        myPacks: boolean\r\n        page: number\r\n        pageCount: number\r\n        min: number\r\n        max: number\r\n        minCardsCount: number\r\n        maxCardsCount: number\r\n        sortPacksDirection: number\r\n        sortBy: string\r\n        user_id: string\r\n        packName: string\r\n        searchText: string\r\n        cardPacksTotalCount: number\r\n    }\r\n}\r\ntype CardsLocalStorageType = {\r\n    cards: CardsInitialStateType\r\n}\r\ntype localStorageStateType = PacksLocalStorageType | CardsLocalStorageType","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {useStyles} from '../../../styles';\r\n\r\n\r\nexport const AddCardModal = React.memo(({closeAddPackModal, addNewCard}: AddPackModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState('')\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        addNewCard(question, answer)\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditCard}>\r\n                <h2>Create new card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={onButtonClickHandler}>Add new card</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewCard: (question: string, answer: string) => void\r\n}","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {useStyles} from '../styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CardsInitialStateType, createCardTC, setPackTC} from '../../../bll/cards-reducer';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {CardsTable} from './cards/CardsTable';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {PacksInitialStateType} from '../../../bll/packs-reducer';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Button from '@material-ui/core/Button';\r\nimport {AddCardModal} from '../commonComponents/modal/addCardModal/AddCardModal';\r\nimport {trimmedString} from '../../../utils/trimmedString-util';\r\nimport s from './Cards.module.css'\r\n\r\n\r\nexport const Cards: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const packID = useLocation().pathname.substring(6)\r\n    const cardsPack_id = cards.cardsPack_id\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [cardQuestion, setCardQuestion] = useState<string>('')\r\n    const [cardAnswer, setCardAnswer] = useState<string>('')\r\n    const [intervalId, setIntervalId] = useState<NodeJS.Timeout>()\r\n    const [addPackModal, setAddPackModal] = useState<boolean>(false)\r\n\r\n    let packName = cards.currentPackName\r\n    if (packs.cardPacks.length) {\r\n        packName = packs.cardPacks.filter(card => card._id === packID)[0].name\r\n    }\r\n    useEffect(() => {\r\n        saveState({\r\n            cards: {...cards, currentPackName: packName, cards: []}\r\n        })\r\n    }, [packName, cards])\r\n\r\n    useEffect(() => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: 1, pageCount: 5, cardQuestion: '', cardAnswer: ''}))\r\n        return function () {\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n        }\r\n    }, [dispatch, packID])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewCard = useCallback((question: string, answer: string) => {\r\n        dispatch(createCardTC({cardsPack_id: cardsPack_id, question, answer}))\r\n    }, [])\r\n\r\n    const searchQuestionHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardQuestion(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: value, cardAnswer: cardAnswer, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [])\r\n\r\n    const searchAnswerHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardAnswer(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: cardQuestion, cardAnswer: value, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {\r\n                addPackModal &&\r\n                <AddCardModal closeAddPackModal={closeAddPackModal}\r\n                              addNewCard={addNewCard}/>\r\n            }\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.arrowBackToPacks}\r\n                         onClick={onClickHandler}>\r\n                        <KeyboardBackspaceIcon/>\r\n                        <div className={s.titleBackToPacks}>\r\n                            <h3>Back to packs</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.packListHeading}>{trimmedString(packName, 50)}</div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={cardQuestion}\r\n                            dispatchHandler={searchQuestionHandler}\r\n                        />\r\n                        <Input\r\n                            placeholderValue={'Search by answer'}\r\n                            value={cardAnswer}\r\n                            dispatchHandler={searchAnswerHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewCardButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                            disabled={cards.packUserId !== idUser}\r\n                        >\r\n                            Add new card\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                        <CardsTable labelRowsPerPage={'Cards per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, CreatePackRequestType, PacksRequestDataType, PacksResponseType, PacksType} from '../dal/api';\r\nimport {packsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PacksType>,\r\n    myPacks: false,\r\n    page: 1,\r\n    pageCount: 5,\r\n    min: 0,\r\n    max: 110,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 110,\r\n    sortPacksDirection: 0,\r\n    sortBy: 'updated',\r\n    user_id: '',\r\n    packName: '',\r\n    searchText: '',\r\n    cardPacksTotalCount: 1,\r\n} as PacksInitialStateType\r\n\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): PacksInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'packs/SET-CARD-PACKS':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                myPacks: action.data.user_id.length > 1,\r\n                sortBy: action.data.sortPacks.slice(1),\r\n                sortPacksDirection: Number(action.data.sortPacks.substring(0, 1)),\r\n                searchText: action.data.packName,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardPacksAC = (data: PacksResponseType & NewCardsApiModelType) =>\r\n    ({type: 'packs/SET-CARD-PACKS', data} as const)\r\n\r\n\r\n//thunks\r\nexport const setCardPacksTC = (data?: PacksRequestDataType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newCardsApiModel = packsApiModel(getState().packs, data)\r\n\r\n        const pastPageCount = getState().packs.pageCount\r\n        const currentPage = getState().packs.page\r\n        const currentPageCount = newCardsApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newCardsApiModel.page\r\n\r\n        try {\r\n            const res = await cardPacksApi.fetchPacks({...newCardsApiModel, page: newPage})\r\n            dispatch(setCardPacksAC({...res.data, ...newCardsApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createPackTC = (data: CreatePackRequestType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await cardPacksApi.createPack(data)\r\n        dispatch(setCardPacksTC({packName: '', page: 1, sortPacks: '0updated'}))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (packId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deletePack(packId)\r\n            const cardsState = getState().packs\r\n            const remainPacks = cardsState.cardPacksTotalCount - (cardsState.pageCount * (cardsState.page - 1))\r\n            dispatch(setCardPacksTC({\r\n                page: remainPacks === 1\r\n                    ? cardsState.page === 1 ? cardsState.page : cardsState.page - 1\r\n                    : cardsState.page\r\n            }))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packID: string, name?: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.updatePack({_id: packID, name})\r\n            dispatch(setCardPacksTC({page: 1}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type PacksInitialStateType = PacksResponseType & {\r\n    myPacks: boolean\r\n    sortPacksDirection: number\r\n    sortBy: string\r\n    user_id: string\r\n    packName: string\r\n    searchText: string\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n}\r\ntype NewCardsApiModelType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\n\r\nexport type SetCardPacksActionType = ReturnType<typeof setCardPacksAC>\r\n\r\nexport type PacksActionsType =\r\n    | SetCardPacksActionType\r\n","import ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React, {ChangeEvent, useState} from 'react';\r\nimport {useStyles} from '../../styles';\r\nimport {PacksInitialStateType, setCardPacksTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport s from './NavBar.module.css'\r\n\r\nexport const NavBar: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [sliderValue, setSliderValue] = useState<number[]>([packs.min, packs.max])\r\n\r\n    const onMyButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: id, min: 0, page: 1, pageCount: 5}))\r\n        setSliderValue([0, packs.max])\r\n    }\r\n\r\n    const onAllButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: '', min: sliderValue[0], max: sliderValue[1], page: 1, pageCount: 5}))\r\n    }\r\n\r\n    const changeSliderValue = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number[])\r\n    }\r\n\r\n    const changeSliderValueForPayload = () => {\r\n        dispatch(setCardPacksTC({min: sliderValue[0], max: sliderValue[1], page: 1}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid className={classes.navbar}>\r\n            <span className={classes.navbarShowPacksCards}>Show packs cards</span>\r\n\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" className={classes.navbarMyAllButtons}>\r\n                <Button onClick={onMyButtonClick}\r\n                        variant={packs.myPacks ? 'contained' : 'outlined'}>My</Button>\r\n                <Button onClick={onAllButtonClick}\r\n                        variant={packs.myPacks ? 'outlined' : 'contained'}>All</Button>\r\n            </ButtonGroup>\r\n\r\n            <div className={s.slider}>\r\n                <Slider\r\n                    value={sliderValue}\r\n                    max={packs.maxCardsCount}\r\n                    onChange={changeSliderValue}\r\n                    onChangeCommitted={changeSliderValueForPayload}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                />\r\n            </div>\r\n        </Grid>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {Button, Radio} from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport {useStyles} from '../../../styles';\r\nimport {ProgressModalComponent} from '../progressModalComponent/ProgressModalComponent';\r\nimport s from '../ModalWindow.module.css'\r\n\r\n\r\nexport const LearnCardsModalAnswer = React.memo((props: LearnCardsModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const {question, answer, packName, openNextRandomCard, closeAllModal} = props\r\n\r\n    const [grade, setGrade] = useState<number>(0)\r\n\r\n    const arrayOfGrades: GradeType = [\r\n        {valueOfGrade: 1, title: 'Did not know'},\r\n        {valueOfGrade: 2, title: 'Forgot'},\r\n        {valueOfGrade: 3, title: 'A lot of thought'},\r\n        {valueOfGrade: 4, title: 'Confused'},\r\n        {valueOfGrade: 5, title: 'Knew the answer'},\r\n    ]\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n    const onChangeCallback = (checkedValue: number) => {\r\n        if (grade === checkedValue) {\r\n            setGrade(0)\r\n        } else if (grade !== checkedValue) {\r\n            setGrade(checkedValue)\r\n        }\r\n    }\r\n\r\n    const nextButtonClickHandler = () => {\r\n        openNextRandomCard(grade === 0 ? 1 : grade)\r\n        setGrade(0)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByAnswer}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Answer: </b>{trimmedString(answer, 90)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>{'Rate yourself:'}</b>\r\n                </div>\r\n\r\n                <ProgressModalComponent/>\r\n                <FormGroup aria-label=\"position\"\r\n                           className={classes.optionsForRateYourself}>\r\n                    {\r\n                        arrayOfGrades.map((el, i) => {\r\n                            return <FormControlLabel\r\n                                key={i}\r\n                                name=\"myRadio\"\r\n                                control={<Radio name=\"myRadio\"\r\n                                                color=\"primary\"\r\n                                                checked={el.valueOfGrade === grade}\r\n                                                onClick={() => onChangeCallback(el.valueOfGrade)}/>}\r\n                                label={el.title}\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        })\r\n                    }\r\n                </FormGroup>\r\n\r\n                <Button\r\n                    className={classes.nextQuestionButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={nextButtonClickHandler}\r\n                >\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    question: string\r\n    answer: string\r\n    packName: string\r\n    openNextRandomCard: (grade: number) => void\r\n    closeAllModal: () => void\r\n}\r\ntype option = {\r\n    valueOfGrade: number\r\n    title: string\r\n}\r\ntype GradeType = option[]","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, GradeRequestType, OnePackType, CardsRequestType} from '../dal/api';\r\n\r\n\r\nconst initialState = [] as OnePackType[]\r\n\r\nexport type CardsForLearnInitialStateType = typeof initialState\r\n\r\nexport const cardsForLearnReducer = (state = initialState, action: CardsForLearnActionsType): CardsForLearnInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cardsForLearn/SET-CARDS-OF-PACK':\r\n            return [\r\n                ...action.data,\r\n            ]\r\n\r\n        case 'cardsForLearn/RESET-CARDS-OF-PACK':\r\n            return []\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardsOfPackAC = (data: OnePackType[]) =>\r\n    ({type: 'cardsForLearn/SET-CARDS-OF-PACK', data} as const)\r\n\r\nexport const resetCardsOfPackAC = () =>\r\n    ({type: 'cardsForLearn/RESET-CARDS-OF-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchCardsOfPackTC = (data: CardsRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const cardsOfPackApiModel = {\r\n            cardsPack_id: data.cardsPack_id,\r\n            pageCount: data.pageCount,\r\n        }\r\n        try {\r\n            const res = await cardPacksApi.fetchPack(cardsOfPackApiModel)\r\n            dispatch(setCardsOfPackAC(res.data.cards))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const updatedGradeTC = (data: GradeRequestType, pageCount: number): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await cardPacksApi.updatedGrade(data)\r\n            dispatch(fetchCardsOfPackTC({cardsPack_id: res.data.updatedGrade.cardsPack_id, pageCount}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetCardsOfPackActionType = ReturnType<typeof setCardsOfPackAC>\r\nexport type ResetCardsOfPackActionType = ReturnType<typeof resetCardsOfPackAC>\r\n\r\nexport type CardsForLearnActionsType =\r\n    | SetCardsOfPackActionType\r\n    | ResetCardsOfPackActionType\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useStyles} from '../../../styles';\r\nimport s from '../ModalWindow.module.css'\r\n\r\nexport const EditPackModal = React.memo(({oldName, closeEditPackModal, updatePackName}: AddPackModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const [newName, setNewName] = useState('')\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        updatePackName(newName)\r\n        closeEditPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeEditPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddPack}>\r\n                <h2>Enter new name of pack</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"New name\"\r\n                    autoFocus\r\n                    value={oldName}\r\n                    onChange={inputChangeHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={onButtonClickHandler}>RENAME</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    oldName: string\r\n    closeEditPackModal: () => void\r\n    updatePackName: (name?: string) => void\r\n}","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport s from '../ModalWindow.module.css'\r\nimport {useStyles} from '../../../styles';\r\n\r\n\r\nexport const LearnCardsModalQuestion = React.memo((props: LearnCardsModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const {packName, question, onAnswerButtonClick, closeAllModal} = props\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByQuestion}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <Button\r\n                    className={classes.showAnswerButton}\r\n                    color=\"primary\" variant={'contained'}\r\n                    onClick={onAnswerButtonClick}\r\n                >\r\n                    Show answer\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    packName: string\r\n    question: string\r\n    onAnswerButtonClick: () => void\r\n    closeAllModal: () => void\r\n}","import React, {ChangeEvent, MouseEvent, useCallback, useEffect, useState} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport {deletePackTC, PacksInitialStateType, setCardPacksTC, updatePackTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {useStyles} from '../../styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport {LearnCardsModalAnswer} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalAnswer';\r\nimport {OnePackType} from '../../../../dal/api';\r\nimport {\r\n    CardsForLearnInitialStateType,\r\n    fetchCardsOfPackTC,\r\n    resetCardsOfPackAC,\r\n    updatedGradeTC\r\n} from '../../../../bll/learn-reducer';\r\nimport {EditPackModal} from '../../commonComponents/modal/editPackModal/EditPackModal';\r\nimport {LearnCardsModalQuestion} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalQuestion';\r\nimport {TableSortLabel} from '@material-ui/core';\r\nimport s from './PacksListTable.module.css'\r\n\r\n\r\nconst getCard = (cards: OnePackType[]) => {\r\n    //const sumOfRepeats = cards.map(card => (6 - card.grade) ** 2).reduce((acc, el) => (acc + el), 0)\r\n    const sumOfRepeats = cards.reduce((acc, card) => (acc + (6 - card.grade) ** 2), 0)\r\n    const random = Math.random() * sumOfRepeats\r\n    let sum = 0\r\n    let i = 0\r\n    do {\r\n        sum = sum + ((6 - cards[i].grade) ** 2)\r\n        i++\r\n    } while (sum < random)\r\n    return cards[i - 1]\r\n}\r\n\r\n\r\nexport const PacksListTable = React.memo((props: PacksListTableProps) => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const cardsForLearn = useSelector<AppRootStateType, CardsForLearnInitialStateType>(state => state.cardsForLearn)\r\n\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n    const [editPackData, setEditPackData] = useState({id: '', name: ''})\r\n    const [learnCardsModalQuestion, setLearnCardsModalQuestion] = useState(false)\r\n    const [learnCardsModalAnswer, setLearnCardsModalAnswer] = useState(false)\r\n\r\n    const [randomCard, setRandomCard] = useState({} as OnePackType)\r\n    const [name, setName] = useState('')\r\n    const [cardsCount, setCardsCount] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        if (cardsForLearn.length) {\r\n            setRandomCard(getCard(cardsForLearn))\r\n            setLearnCardsModalAnswer(false)\r\n            setLearnCardsModalQuestion(true)\r\n        }\r\n    }, [cardsForLearn])\r\n\r\n    const fetchAnswerQuestion = useCallback(() => {\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(true)\r\n    }, [])\r\n\r\n    const openNextRandomCard = useCallback((grade: number) => {\r\n        dispatch(updatedGradeTC({grade, card_id: randomCard._id}, cardsCount))\r\n    }, [])\r\n\r\n    const closeAllModal = useCallback(() => {\r\n        dispatch(resetCardsOfPackAC())\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(false)\r\n    }, [])\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setCardPacksTC({page: newPage + 1}))\r\n    }, [dispatch])\r\n\r\n    const updatePackName = useCallback((newName?: string) => {\r\n        dispatch(updatePackTC(editPackData.id, newName))\r\n    }, [])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (packs.sortPacksDirection === 0) {\r\n            dispatch(setCardPacksTC({sortPacks: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setCardPacksTC({sortPacks: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const onDeleteButtonClickHandler = (packId: string) => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setCardPacksTC({pageCount: parseInt(e.target.value)}))\r\n    }\r\n\r\n    const startLearning = async (cardsPack_id: string, pageCount: number, name: string) => {\r\n        await dispatch(fetchCardsOfPackTC({cardsPack_id, pageCount}))\r\n        setName(name)\r\n        setCardsCount(pageCount)\r\n    }\r\n\r\n    const openEditPackModal = (id: string, name: string) => {\r\n        setEditPackData({id, name})\r\n        setEditPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                learnCardsModalQuestion &&\r\n                <LearnCardsModalQuestion\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    onAnswerButtonClick={fetchAnswerQuestion}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                learnCardsModalAnswer &&\r\n                <LearnCardsModalAnswer\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    answer={randomCard.answer}\r\n                    openNextRandomCard={openNextRandomCard}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                editPackModal &&\r\n                <EditPackModal\r\n                    oldName={editPackData.name}\r\n                    closeEditPackModal={closeEditPackModal}\r\n                    updatePackName={updatePackName}\r\n                />\r\n            }\r\n            <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                <TableHead className={classes.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'name'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('name')}\r\n                            >\r\n                                Name\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'cardsCount'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('cardsCount')}\r\n                            >\r\n                                Cards\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'updated'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('updated')}\r\n                            >\r\n                                Last Updated\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'created'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('created')}\r\n                            >\r\n                                Created By\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        packs.cardPacks.map((cards) => (\r\n                                <TableRow key={cards._id}>\r\n                                    <TableCell component=\"th\">\r\n                                        <NavLink to={`/pack/${cards._id}`} className={classes.packsListTableBodyNavLink}>\r\n                                            {trimmedString(cards.name, 10)}\r\n                                        </NavLink>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{cards.cardsCount}</TableCell>\r\n                                    <TableCell align=\"right\">{updateDate(cards.updated)}</TableCell>\r\n                                    <TableCell align=\"right\">{trimmedString(cards.user_name, 10)}</TableCell>\r\n                                    <TableCell align=\"right\" style={{width: '224px'}}>\r\n                                                    <span className={classes.packsListTableBodyActionsSection}>\r\n                                                        {cards.user_id === id &&\r\n                                                        <span>\r\n                                                            <Button\r\n                                                                onClick={() => onDeleteButtonClickHandler(cards._id)}\r\n                                                                size={'small'}\r\n                                                                variant={'outlined'}\r\n                                                                color={'secondary'}>Delete</Button>\r\n                                                            <Button\r\n                                                                onClick={() => openEditPackModal(cards._id, cards.name)}\r\n                                                                size={'small'}\r\n                                                                variant={'outlined'}\r\n                                                                style={{margin: '0 10px'}}\r\n\r\n                                                            >\r\n                                                                Edit\r\n                                                            </Button>\r\n                                                        </span>\r\n                                                        }\r\n                                                        <Button\r\n                                                            onClick={() => startLearning(cards._id, cards.cardsCount, cards.name)}\r\n                                                            size={'small'}\r\n                                                            variant={'outlined'}\r\n                                                            disabled={cards.cardsCount === 0}\r\n                                                        >\r\n                                                            Learn\r\n                                                        </Button>\r\n                                                    </span>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        )\r\n                    }\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <td className={s.footerPage}>\r\n                            Page: {packs.page} (Total:{Math.ceil(packs.cardPacksTotalCount / packs.pageCount)})\r\n                        </td>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25, {\r\n                                label: 'All',\r\n                                value: packs.cardPacksTotalCount\r\n                            }]}\r\n                            colSpan={6}\r\n                            count={packs.cardPacksTotalCount}\r\n                            rowsPerPage={packs.pageCount}\r\n                            page={packs.page - 1}\r\n                            SelectProps={{\r\n                                inputProps: {'aria-label': 'rows per page'},\r\n                                native: true,\r\n                            }}\r\n                            labelRowsPerPage={props.labelRowsPerPage}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangePageCount}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n        </>\r\n    )\r\n})\r\n\r\ntype SortByType = 'name' | 'cardsCount' | 'updated' | 'created'\r\ntype PacksListTableProps = {\r\n    labelRowsPerPage: string\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {useStyles} from '../../../styles';\r\n\r\n\r\nexport const AddPackModal = React.memo(({closeAddPackModal, addNewPack}: AddPackModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const [text, setText] = useState('')\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        addNewPack(text)\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddPack}>\r\n                <h2>Enter new pack name</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"Name\"\r\n                    autoFocus\r\n                    value={text}\r\n                    onChange={inputChangeHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant='contained'\r\n                        onClick={onButtonClickHandler}>Add new pack</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewPack: (newPackName: string) => void\r\n}","import {useStyles} from '../styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {createPackTC, PacksInitialStateType, setCardPacksTC} from '../../../bll/packs-reducer';\r\nimport React, {useCallback, useEffect, useState} from 'react';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport {NavBar} from './packs/NavBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {PacksListTable} from './packs/PacksListTable';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {AddPackModal} from '../commonComponents/modal/addPackModal/AddPackModal';\r\nimport s from '../cards/Cards.module.css'\r\n\r\n\r\nexport const PacksList: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n\r\n    const [addPackModal, setAddPackModal] = useState(false)\r\n    const [searchText, setSearchText] = useState<string>(packs.searchText)\r\n    const [intervalID, setIntervalID] = useState<NodeJS.Timeout>()\r\n\r\n    useEffect(() => {\r\n        dispatch(setCardPacksTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        saveState({\r\n            packs: {\r\n                cardPacks: [],\r\n                myPacks: packs.myPacks,\r\n                page: packs.page,\r\n                pageCount: packs.pageCount,\r\n                min: packs.min,\r\n                max: packs.max,\r\n                minCardsCount: packs.minCardsCount,\r\n                maxCardsCount: packs.maxCardsCount,\r\n                sortPacksDirection: packs.sortPacksDirection,\r\n                sortBy: packs.sortBy,\r\n                user_id: packs.user_id,\r\n                packName: packs.packName,\r\n                searchText: packs.searchText,\r\n                cardPacksTotalCount: packs.cardPacksTotalCount,\r\n            }\r\n        })\r\n    }, [packs])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewPack = useCallback((newPackName: string) => {\r\n        dispatch(createPackTC({cardsPack: {name: newPackName}}))\r\n    }, [])\r\n\r\n    const searchInputHandler = useCallback((value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setSearchText(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setCardPacksTC({packName: value, page: 1}))\r\n        }, 800)\r\n        setIntervalID(newIntervalID)\r\n    }, [])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {addPackModal && <AddPackModal\r\n                closeAddPackModal={closeAddPackModal}\r\n                addNewPack={addNewPack}\r\n            />}\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <NavBar/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.packListHeading}>Packs list</div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={searchText}\r\n                            dispatchHandler={searchInputHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewPackButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                        >\r\n                            Add new pack\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                        <PacksListTable labelRowsPerPage={'Packs per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Registration} from './components/auth/Registration';\r\nimport {Login} from './components/auth/Login';\r\nimport {ForgotPassword} from './components/auth/ForgotPassword';\r\nimport {Profile} from './components/profile/Profile';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './bll/store';\r\nimport {initializeAppTC} from './bll/app-reducer';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {NewPassword} from './components/auth/NewPassword';\r\nimport {PrivateRoute} from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\nimport {Header} from './components/header/Header';\r\nimport {Cards} from './components/main/cards/Cards';\r\nimport {PacksList} from './components/main/packsList/PacksList';\r\nimport {logoutTC} from './bll/auth-reducer';\r\n\r\n\r\nconst App: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button><NavLink to=\"/\">Home</NavLink></button>\r\n                <button><NavLink to=\"/\">Main</NavLink></button>\r\n                <button><NavLink to=\"/registration\">Register</NavLink></button>\r\n                <button><NavLink to=\"/login\">Login</NavLink></button>\r\n                <button><NavLink to=\"/changepassword\">Change Password</NavLink></button>\r\n                <button><NavLink to=\"/profile\">Profile</NavLink></button>\r\n                <span style={{color: `${isInitialized ? 'green' : 'red'}`}}> (INITIALIZED) </span>\r\n                <span style={{color: `${isLoggedIn ? 'green' : 'red'}`}}> (LOGIN) </span>\r\n                <span style={{color: `${isRegistered ? 'green' : 'red'}`}}> (REGISTERED) </span>\r\n                <button onClick={obLogOutClick}>LOGOUT</button>\r\n            </div>\r\n            <Header/>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <PacksList/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute exact path=\"/pack/:id\" isLoggedIn={isLoggedIn} render={() => <Cards/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>}\r\n                                  redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>}\r\n                                  redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, AuthActionsType} from './auth-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {PacksActionsType, packsReducer} from './packs-reducer';\r\nimport {loadState} from '../utils/localStorage-util';\r\nimport {PackActionsType, cardsReducer} from './cards-reducer';\r\nimport {CardsForLearnActionsType, cardsForLearnReducer} from './learn-reducer';\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    cardsForLearn: cardsForLearnReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, loadState(), applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | AuthActionsType\r\n    | AppActionsType\r\n    | PacksActionsType\r\n    | PackActionsType\r\n    | CardsForLearnActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrowBackToPacks\":\"Cards_arrowBackToPacks__VpMBx\",\"titleBackToPacks\":\"Cards_titleBackToPacks__3k1jp\",\"packListHeading\":\"Cards_packListHeading__3jqnj\",\"inputButtonSection\":\"Cards_inputButtonSection__2SHaj\",\"footerPage\":\"Cards_footerPage__qfslx\"};"],"sourceRoot":""}