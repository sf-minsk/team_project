{"version":3,"sources":["features/error404/Error404.module.css","dal/register-api.ts","dal/auth-api.ts","bll/profile-reducer.ts","bll/auth-reducer.ts","bll/app-reducer.ts","bll/register-reducer.ts","features/errors/ErrorSnackbar.tsx","components/auth/registration/Registration.tsx","components/auth/login/Login.tsx","dal/changePassword-api.ts","utils/changePasswordModel-util.ts","bll/changePassword-reducer.ts","components/auth/forgotPassword/ForgotPassword.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/auth/forgotPassword/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","components/main/styles.ts","components/header/Header.tsx","components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.tsx","components/main/commonComponents/Input.tsx","dal/cards-api.ts","utils/cardsApiModel-util.ts","bll/pack-reducer.ts","utils/trimmedString-util.ts","utils/updateDate-util.ts","components/main/commonComponents/TablePagination.tsx","components/main/commonComponents/modal/editCardModal/EditCardModal.tsx","components/main/pack/pack/PackTableActions.tsx","components/main/pack/pack/PackTable.tsx","utils/localStorage-util.ts","components/main/commonComponents/modal/addCardModal/AddCardModal.tsx","components/main/pack/Pack.tsx","bll/packs-reducer.ts","components/main/packsList/packs/NavBar.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalAnswer.tsx","bll/learn-reducer.ts","components/main/commonComponents/modal/editPackModal/EditPackModal.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalQuestion.tsx","components/main/packsList/packs/PacksListTable.tsx","components/main/commonComponents/modal/addPackModal/AddPackModal.tsx","components/main/packsList/PacksList.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","registerApi","email","password","post","authApi","data","delete","initialState","setProfileAC","type","payload","isLoggedIn","setSignInAC","value","logoutTC","dispatch","a","setAppStatusAC","error","errorType","status","isInitialized","setAppErrorAC","setIsInitializedAC","isRegistered","ErrorSnackbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","Registration","classes","useStyles","register","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","response","message","resetForm","to","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","Typography","variant","CircularProgress","style","position","top","textAlign","handleSubmit","form","noValidate","TextField","height","fullWidth","label","margin","autoFocus","helperText","touched","errors","getFieldProps","Button","color","submit","disabled","isValid","makeStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","palette","secondary","main","width","Login","requestStatus","rememberMe","res","FormControlLabel","control","Checkbox","Grid","container","item","xs","Link","RouterLink","changePasswordApi","model","changePasswordModel","from","changeProcess","ForgotPassword","changePassword","left","id","Profile","profileData","profile","newPasswordSet","NewPassword","setNewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","console","log","history","useHistory","onClickHandler","useCallback","goBack","s","src","Error404Img","alt","size","onClick","root","flexShrink","marginLeft","justifyContent","tab","typo","logoutButton","borderColor","marginRight","padding","marginBottom","minHeight","minWidth","navBar","borderRadius","body","table","showPacksCards","fontSize","fontWeight","MyAllButtons","input","addNewPackButton","addNewCardButton","packListHeading","overflowWrap","inputButtonSection","buttonsOfActionsSection","buttonEditCard","footerPage","tableHead","navLink","textDecoration","learnCardsModalDarkWindow","bottom","zIndex","learnCardsModalWindowByQuestion","border","Header","location","useLocation","login","useState","setValue","useEffect","pathname","AppBar","Tabs","centered","Tab","push","icon","DynamicFeedOutlined","AccountCircleOutlined","ProgressModalComponent","React","memo","appStatus","Input","props","onChangeHandler","e","dispatchHandler","target","placeholder","placeholderValue","onChange","cardPacksApi","generateURL","Object","entries","forEach","el","newURL","slice","get","pack","put","cardsPack","card","packsApiModel","packs","apiModel","packName","sortPacks","JSON","stringify","sortPacksDirection","sortBy","page","pageCount","user_id","packApiModel","cardAnswer","cardQuestion","cardsPack_id","sortCards","sortCardDirection","cards","cardsTotalCount","minGrade","maxGrade","packUserId","currentPackName","searchTextAnswer","searchTexQuestion","setPackAC","setPackTC","getState","newPackApiModel","pastPageCount","currentPage","currentPageCount","newPage","Math","floor","trimmedString","str","number","length","substring","updateDate","cardUpdateDate","Date","toLocaleString","year","month","day","TablePaginationActions","useTheme","count","rowsPerPage","onPageChange","IconButton","aria-label","direction","ceil","EditCardModal","question","setQuestion","answer","setAnswer","closeAddPackModal","currentTarget","editCard","_id","PackTableActions","editPackModal","setEditPackModal","TableCell","align","deleteCard","PackTable","idUser","packID","onClickSortHandler","sortValue","handleChangePage","deleteCardHandler","cardId","deleteCardTC","editCardHandler","editCardTC","Table","TableHead","TableRow","TableSortLabel","active","TableBody","map","updated","round","grade","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","labelRowsPerPage","onRowsPerPageChange","parseInt","ActionsComponent","loadState","serializedState","localStorage","getItem","parse","err","saveState","prevState","setItem","AddCardModal","addNewCard","Pack","setCardQuestion","setCardAnswer","intervalID","setIntervalID","cardPacks","filter","name","addPackModal","setAddPackModal","Paper","cursor","clearInterval","newIntervalID","setTimeout","TableContainer","myPacks","minCardsCount","maxCardsCount","searchText","cardPacksTotalCount","setCardPacksAC","setCardPacksTC","newCardsApiModel","NavBar","sliderValue","setSliderValue","ButtonGroup","Slider","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","LearnCardsModalAnswer","openNextRandomCard","closeAllModal","setGrade","FormGroup","valueOfGrade","title","i","Radio","checked","checkedValue","labelPlacement","setCardsOfPackAC","fetchCardsOfPackTC","cardsOfPackApiModel","EditPackModal","newName","setNewName","closeEditPackModal","oldName","updatePackName","LearnCardsModalQuestion","onAnswerButtonClick","PacksListTable","cardsForLearn","editPackData","setEditPackData","learnCardsModalQuestion","setLearnCardsModalQuestion","learnCardsModalAnswer","setLearnCardsModalAnswer","randomCard","setRandomCard","setName","cardsCount","setCardsCount","getCard","onDeleteButtonClickHandler","packId","cardsState","remainPacks","deletePackTC","sumOfRepeats","reduce","acc","random","sum","startLearning","card_id","updatedGrade","updatePackTC","user_name","openEditPackModal","AddPackModal","text","setText","addNewPack","PacksList","setSearchText","newPackName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Number","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5b1a5c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__2OK93\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const registerApi = {\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, {email, password})\r\n    },\r\n}\r\n\r\n// export type RegisterRequestDataType = {\r\n//     email: string\r\n//     password: string\r\n// }\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseAuthType>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.post<ResponseAuthType>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type ResponseAuthType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n","import {ResponseAuthType} from \"../dal/auth-api\";\r\n\r\nconst initialState = {} as ProfileStateType\r\nexport type ProfileStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string,\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: ResponseAuthType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\n\r\nexport type ProfileActionsType = SetProfileActionType\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>","import {authApi, LoginParamsType} from '../dal/auth-api';\r\nimport {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n    //profile\r\n\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: LoginActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-SIGN-IN':\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignInAC = (value: boolean) =>\r\n    ({type: 'login/SET-SIGN-IN', value} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.login(data)\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch((setAppStatusAC('succeeded')))\r\n        } catch (err) {\r\n            const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n\r\n    }\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LoginActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\n\r\n","import {authApi} from '../dal/auth-api';\r\nimport {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from \"./profile-reducer\";\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'idle' as AppStatusType, ///\r\n    isInitialized: false ///is necessary data for all app is requested\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {\r\n                ...state, error: action.error, errorType: action.errorType\r\n            }\r\n        case 'app/SET-APP-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {\r\n                ...state, isInitialized: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (value: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.me()\r\n            if (res.data) {\r\n                dispatch(setProfileAC(res.data))\r\n                dispatch(setSignInAC(true))\r\n                dispatch(setProfileAC(res.data))\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        } finally {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppErrorType = \"error\" | \"warning\" | \"info\" | \"success\"\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {AppThunk} from './store';\r\nimport {registerApi} from '../dal/register-api';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'register/SET-SIGN-UP':\r\n            return {\r\n                ...state, isRegistered: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignUpAC = () =>\r\n    ({type: 'register/SET-SIGN-UP'} as const)\r\n\r\n\r\n//thunks\r\nexport const setSignUpTC = (email: string, password: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await registerApi.register(email, password)\r\n            dispatch(setSignUpAC())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\n\r\nexport type RegisterActionsType =\r\n    | SetSignUpActionType\r\n    | SetAppErrorActionType","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport React from 'react';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setSignUpTC} from '../../../bll/register-reducer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {AppStatusType} from '../../../bll/app-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\n\r\nexport const Registration: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    {\r\n                        status === 'loading' &&\r\n                        <CircularProgress style={{position: 'fixed', top: '40%', textAlign: 'center'}}/>\r\n                    }\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n\r\n                        <Button\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}))","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {AppStatusType} from '../../../bll/app-reducer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n    const requestStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                // .min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    if (requestStatus === 'loading') {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        // autoComplete=\"email\"\r\n                        type=\"email\"\r\n                        // autoFocus\r\n                        // error={!!formik.errors.email}\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        // error={!!formik.errors.password}\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: `http://localhost:7542/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n// API\r\nexport const changePasswordApi = {\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n// Types\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n<!--                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>-->\r\n                        <a href='https://sf-minsk.github.io/team_project/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    changeProcess: false\r\n}\r\n\r\nexport const changePasswordReducer = (state: initialStateType = initialState, action: ChangePasswordActionsType) => {\r\n    switch (action.type) {\r\n        case 'changePassword/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const changePasswordAC = () => {\r\n    return {\r\n        type: 'changePassword/CHANGE-PASSWORD',\r\n    } as const\r\n}\r\n\r\n//THUNK creators\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await changePasswordApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n}\r\n\r\n// Types\r\ntype initialStateType = typeof initialState\r\nexport type ChangePasswordActionsType =\r\n    | ReturnType<typeof changePasswordAC>\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {changePasswordTC} from \"../../../bll/changePassword-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.changePassword.changeProcess)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email('Invalid email address').required('Required field'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <ErrorSnackbar/>\r\n                {(status === 'loading') &&\r\n                <div\r\n                    style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                    <CircularProgress/>\r\n                </div>\r\n                }\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            id=\"email\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            // autoComplete=\"email\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {ErrorSnackbar} from \"../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>Your e-mail: {profileData}</div>\r\n        </div>\r\n    )\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    newPasswordSet: false\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialStateType = initialState, action: setNewPasswordActionTypes) => {\r\n    switch (action.type) {\r\n        case 'setNewPassword/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nconst setNewPasswordAC = () => {\r\n    return {\r\n        type: 'setNewPassword/SET-NEW-PASSWORD',\r\n    } as const\r\n}\r\n\r\n// THUNK Creators\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await changePasswordApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n\r\n}\r\n\r\n// Types\r\ntype initialStateType = {\r\n    newPasswordSet: boolean\r\n}\r\nexport type setNewPasswordActionTypes =\r\n    | ReturnType<typeof setNewPasswordAC>","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPasswordTC} from \"../../../bll/setNewPassword-reducer\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOpenOutlinedIcon from \"@material-ui/icons/LockOpenOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            {(status === 'loading') &&\r\n            <div\r\n                style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n            }\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"password\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"confirmPassword\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n\r\n    )\r\n}\r\n","import React, {ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}\r\n\r\nexport const PrivateRoute: React.FC<PropsType> = ({render: Component, isLoggedIn, path, redirectTo}) => {\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Error404 = () => {\r\n    console.log('Error404')\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {Theme} from '@material-ui/core/styles/createTheme';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexShrink: 0,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n    app: {\r\n        position: 'static',\r\n        flexDirection: 'row',\r\n        display: 'flex',\r\n        height: '72px',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    tab: {},\r\n    typo: {\r\n        marginLeft: '10px',\r\n    },\r\n    logoutButton: {\r\n        color: 'white',\r\n        borderColor: 'white',\r\n        marginRight: '10px',\r\n    },\r\n    container: {\r\n        padding: '0 12px',\r\n    },\r\n    paper: {\r\n        marginTop: '20px',\r\n        marginBottom: '60px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        minHeight: '600px',\r\n        minWidth: '1000px',\r\n    },\r\n    navBar: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxWidth: '200px',\r\n        minWidth: '200px',\r\n        backgroundColor: 'lightblue',\r\n        borderRadius: '4px 0px 0px 4px',\r\n    },\r\n    body: {\r\n        margin: '10px 12px',\r\n        padding: '0 12px',\r\n    },\r\n    table: {\r\n\r\n        minWidth: '700px',\r\n    },\r\n    showPacksCards: {\r\n        fontSize: '20px',\r\n        fontWeight: 'bold',\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n    },\r\n    MyAllButtons: {\r\n        marginTop: '20px',\r\n    },\r\n    input: {\r\n        height: '40px',\r\n        marginRight: '15px'\r\n    },\r\n    addNewPackButton: {\r\n        width: '230px',\r\n        marginLeft: '20px',\r\n    },\r\n    addNewCardButton: {\r\n        width: '300px',\r\n    },\r\n    packListHeading: {\r\n        fontSize: '30px',\r\n        fontWeight: 'bold',\r\n        overflowWrap: 'break-word',\r\n    },\r\n    inputButtonSection: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    buttonsOfActionsSection: {\r\n        display: 'flex',\r\n        width: '224px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    buttonEditCard: {\r\n        variant: \"outlined\",\r\n        color: \"primary\"\r\n    },\r\n    footerPage: {\r\n        display: 'flex',\r\n        height: '53px',\r\n        marginLeft: '10px',\r\n        alignItems: 'center',\r\n    },\r\n    tableHead: {\r\n        backgroundColor: 'lightblue',\r\n    },\r\n    navLink: {\r\n        textDecoration: 'none',\r\n        color: 'black'\r\n    },\r\n    learnCardsModalDarkWindow: {\r\n        position: 'fixed',\r\n        bottom: '0',\r\n        left: '0',\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundColor: `rgba(${0}, ${0}, ${0}, ${0.6})`,\r\n        zIndex: 10,\r\n    },\r\n    learnCardsModalWindowByQuestion: {\r\n        position: 'fixed',\r\n        left: `calc(50vw - 220px)`,\r\n        top: `calc(50vh - 156px)`,\r\n        width: '440px',\r\n        height: '250px',\r\n        border: '1px solid white',\r\n        borderRadius: '6px 6px 6px 6px',\r\n        backgroundColor: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '20px 0 40px',\r\n        zIndex: 11,\r\n    },\r\n\r\n}))","import React, {useEffect, useState} from 'react';\r\nimport {AppBar, Tab, Tabs} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport {logoutTC} from '../../bll/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AccountCircleOutlined, DynamicFeedOutlined} from '@material-ui/icons';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {useStyles} from '../main/styles';\r\n\r\n\r\nexport const Header = () => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    let history = useHistory()\r\n    let location = useLocation()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    let [value, setValue] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/profile') {\r\n            setValue(1)\r\n        } else {\r\n            setValue(0)\r\n        }\r\n    }, [location, value])\r\n\r\n\r\n    const onPacksClickHandler = () => {\r\n        setValue(0)\r\n        history.push('/')\r\n    }\r\n    const onProfileClickHndler = () => {\r\n        setValue(1)\r\n        history.push('/profile')\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return <>\r\n        <AppBar className={classes.app}>\r\n\r\n            <Typography className={classes.typo} variant={\"h6\"}>\r\n                CARDS\r\n            </Typography>\r\n            {isLoggedIn ?\r\n                <>\r\n                    <Tabs className={classes.tab}\r\n                          value={value}\r\n                          centered\r\n                    >\r\n                        <Tab onClick={onPacksClickHandler} label={'Packs List'} icon={<DynamicFeedOutlined/>}/>\r\n                        <Tab onClick={onProfileClickHndler} label={'Profile'} icon={<AccountCircleOutlined/>}/>\r\n                    </Tabs>\r\n                    <Button className={classes.logoutButton} onClick={obLogOutClick}\r\n                            variant=\"outlined\"\r\n                    >\r\n                        LOGOUT\r\n                    </Button>\r\n                </> : null\r\n            }\r\n        </AppBar>\r\n    </>\r\n}","import CircularProgress from '@material-ui/core/CircularProgress';\r\nimport React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../../bll/store';\r\nimport {AppStatusType} from '../../../../../bll/app-reducer';\r\n\r\n\r\nexport const ProgressModalComponent: React.FC = React.memo(() => {\r\n\r\n    const appStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <>\r\n            {appStatus === 'loading' &&\r\n            <div style={{position: 'fixed', bottom: '0', left: '0', height: '100%', width: '100%', zIndex: 1}}>\r\n                <div style={{position: 'absolute', left: '50%', top: '50%', width: '100%'}}>\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n})","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {useStyles} from '../styles';\r\n\r\ntype InputSearchPropsType = {\r\n    placeholderValue: string\r\n    value: string\r\n    dispatchHandler: (value: string) => void\r\n}\r\n\r\nexport const Input = React.memo(function (props: InputSearchPropsType) {\r\n    const classes = useStyles();\r\n\r\n    const onChangeHandler = async (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.dispatchHandler(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            className={classes.input}\r\n            placeholder={props.placeholderValue ? props.placeholderValue : \"Search\"}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n            onChange={onChangeHandler}\r\n            value={props.value}\r\n\r\n        />\r\n    )\r\n})\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardPacksApi = {\r\n    fetchPacks(payload?: PacksRequestDataType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PacksResponseType>(`cards/pack${newURL}`)\r\n    },\r\n    createPack(pack: CreatePackRequestType) {\r\n        return instance.post(`cards/pack`, pack)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePackRequestType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    fetchPack(payload: PackRequestType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PackResponseType>(`/cards/card${newURL}`)\r\n    },\r\n\r\n    createCard(data: CreateCardType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    editCard(data: EditCardRequestType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    },\r\n    updatedGrade(payload: GradeRequestType) {\r\n        return instance.put<GradeResponseType>(`/cards/grade`, payload)\r\n    },\r\n}\r\n// get packs type\r\n\r\nexport type PacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<PacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type PacksType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\n// create pack type\r\n\r\nexport type CreatePackRequestType = {\r\n    cardsPack: PackDataType\r\n}\r\nexport type PackDataType = {\r\n    name?: string | null\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n// update pack type\r\n\r\nexport type UpdatePackRequestType = {\r\n    _id: string,\r\n    name?: string,\r\n}\r\n\r\n// get pack type\r\n\r\nexport type PackRequestType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type PackResponseType = {\r\n    cards: Array<OnePackType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type OnePackType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n// create card type\r\nexport type CreateCardType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type EditCardRequestType = CreateCardType & {\r\n    _id: string\r\n}\r\n\r\n//update grade\r\nexport type GradeRequestType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\nexport type GradeResponseType = {\r\n    updatedGrade: GradeDataType\r\n}\r\nexport type GradeDataType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","import {PackRequestType, PacksRequestDataType} from '../dal/cards-api';\r\nimport {CardsInitialStateType} from \"../bll/packs-reducer\";\r\nimport {PackInitialStateType} from '../bll/pack-reducer';\r\n\r\nexport const packsApiModel = (packs: CardsInitialStateType, data?: PacksRequestDataType) => {\r\n    const apiModel = {\r\n        packName: packs.packName,\r\n        min: packs.min,\r\n        max: packs.max,\r\n        sortPacks: JSON.stringify(packs.sortPacksDirection) + packs.sortBy,\r\n        page: packs.page,\r\n        pageCount: packs.pageCount,\r\n        user_id: packs.user_id,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\nexport const packApiModel = (pack: PackInitialStateType, data?: PackRequestType) => {\r\n    const apiModel = {\r\n        cardAnswer: pack.cardAnswer,\r\n        cardQuestion: pack.cardQuestion,\r\n        cardsPack_id: pack.cardsPack_id,\r\n        min: pack.min,\r\n        max: pack.max,\r\n        sortCards: JSON.stringify(pack.sortCardDirection) + pack.sortBy,\r\n        page: pack.page,\r\n        pageCount: pack.pageCount,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\n","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CreateCardType,\r\n    EditCardRequestType,\r\n    OnePackType,\r\n    PackRequestType,\r\n    PackResponseType\r\n} from '../dal/cards-api';\r\nimport {packApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<OnePackType>,\r\n    cardsTotalCount: 1,\r\n    minGrade: 0,\r\n    maxGrade: 5,\r\n    page: 1,\r\n    pageCount: 5,\r\n    packUserId: '',\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    min: 0,\r\n    max: 5,\r\n    sortCardDirection: 0,\r\n    sortBy: 'updated',\r\n    cardsPack_id: '',\r\n    currentPackName: 'Pack name',\r\n    searchTextAnswer: '',\r\n    searchTexQuestion: '',\r\n} as PackInitialStateType\r\n\r\nexport type PackInitialStateType = PackResponseType & {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    min: number\r\n    max: number\r\n    sortCardDirection: number\r\n    sortBy: string\r\n    cardsPack_id: string\r\n    currentPackName: string\r\n    searchTextAnswer: string\r\n    searchTexQuestion: string\r\n}\r\n\r\nexport const packReducer = (state = initialState, action: PackActionsType): PackInitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-PACK':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                sortBy: action.data.sortCards.slice(1),\r\n                sortCardDirection: Number(action.data.sortCards.substring(0, 1)),\r\n                searchTextAnswer: action.data.cardAnswer,\r\n                searchTexQuestion: action.data.cardQuestion,\r\n            }\r\n        case 'cards/RESET-PACK':\r\n            return {\r\n                ...state,\r\n                cards: [],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPackAC = (data: PackResponseType & NewPackApiModelType) =>\r\n    ({type: 'cards/SET-PACK', data} as const)\r\nexport const resetPackAC = () =>\r\n    ({type: 'cards/RESET-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const setPackTC = (data: PackRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newPackApiModel = packApiModel(getState().pack, data)\r\n        const pastPageCount = getState().pack.pageCount\r\n        const currentPage = getState().pack.page\r\n        const currentPageCount = newPackApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newPackApiModel.page\r\n        try {\r\n            const res = await cardPacksApi.fetchPack({...newPackApiModel, page: newPage})\r\n            dispatch(setPackAC({...res.data, ...newPackApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createCardTC = (data: CreateCardType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id, page:1, sortCards: '0updated', }))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const deleteCardTC = (cardsPack_id: string, cardId: string): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deleteCard(cardId)\r\n            dispatch(setPackTC({cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const editCardTC = (data: EditCardRequestType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.editCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\n//types\r\nexport\r\ntype SetPackActionType = ReturnType<typeof setPackAC>\r\ntype resetPackActionType = ReturnType<typeof resetPackAC>\r\n\r\nexport type PackActionsType =\r\n    | SetPackActionType\r\n    | resetPackActionType\r\n\r\n\r\ntype NewPackApiModelType = {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    cardsPack_id: string\r\n    min: number\r\n    max: number\r\n    sortCards: string\r\n    page: number\r\n    pageCount: number\r\n\r\n\r\n}\r\n","export const trimmedString = (str: string, number: number) => {\r\n    if (str.length > number) {\r\n        return str.substring(0, number) + '...'\r\n    } else {\r\n        return str\r\n    }\r\n}","export const updateDate = (cardUpdateDate: string) => {\r\n    let formattedDate = new Date(cardUpdateDate)\r\n    return formattedDate.toLocaleString('es', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: 'numeric',\r\n    })\r\n}","import useTheme from '@material-ui/core/styles/useTheme';\r\nimport React, {MouseEvent} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport {useStyles} from '../styles';\r\n\r\n\r\nexport const TablePaginationActions = React.memo((props: TablePaginationActionsProps) => {\r\n\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    const {count, rowsPerPage, page, onPageChange} = props\r\n\r\n    const handleFirstPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype TablePaginationActionsProps = {\r\n    count: number\r\n    rowsPerPage: number\r\n    page: number\r\n    onPageChange: (e: MouseEvent<HTMLButtonElement>, newPage: number) => void\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {EditCardRequestType, OnePackType} from \"../../../../../dal/cards-api\";\r\n\r\n\r\ntype EditPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nexport const EditCardModal = (props: EditPackModalPropsType) => {\r\n\r\n\r\n    const [question, setQuestion] = useState<string>(props.card.question)\r\n    const [answer, setAnswer] = useState<string>(props.card.answer)\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        props.editCard({cardsPack_id: props.card.cardsPack_id, _id: props.card._id, answer, question})\r\n        props.closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        props.closeAddPackModal()\r\n    }\r\n    return <>\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: `rgba(${0}, ${0}, ${0}, ${0.2})`,\r\n            zIndex: 10\r\n        }}\r\n             onClick={onBackgroundClick}>\r\n        </div>\r\n        <div style={{\r\n            position: 'fixed',\r\n            left: `calc(50vw - 250px)`,\r\n            top: `calc(50vh - 171px)`,\r\n            width: '500px',\r\n            height: '300px',\r\n            border: '1px solid white',\r\n            borderRadius: '6px 6px 6px 6px',\r\n            backgroundColor: 'white',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            margin: '20px 0',\r\n            zIndex: 11\r\n        }}>\r\n            <h2>Edit card</h2>\r\n            <TextField\r\n                label=\"Question\"\r\n                style={{width: '450px'}}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                value={question}\r\n                onChange={inputChangeHandlerQuestion}\r\n            />\r\n\r\n            <TextField\r\n                label=\"Answer\"\r\n                style={{width: '450px', marginTop: '30px'}}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                value={answer}\r\n                onChange={inputChangeHandlerAnswer}\r\n            />\r\n            <Button\r\n                style={{width: '150px', marginTop: '30px'}}\r\n                color=\"primary\"\r\n                variant={'contained'}\r\n                onClick={onButtonClickHandler}>Save changes</Button>\r\n        </div>\r\n\r\n    </>\r\n}","import React, {useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {EditCardModal} from \"../../commonComponents/modal/editCardModal/EditCardModal\";\r\nimport {EditCardRequestType, OnePackType} from \"../../../../dal/cards-api\";\r\n\r\ntype PackTableActionsPropsType = {\r\n    deleteCard: (cardId: string) => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nexport const PackTableActions = React.memo(function (props: PackTableActionsPropsType) {\r\n    const [editPackModal, setEditPackModal] = useState<boolean>(false)\r\n    const openEditPackModal = () => {\r\n        setEditPackModal(true)\r\n    }\r\n    const closeEditPackModal = () => {\r\n        setEditPackModal(false)\r\n    }\r\n\r\n    return (\r\n        <TableCell align=\"right\" style={{width: '166px', padding: '16px 0'}}>\r\n            {editPackModal && <EditCardModal\r\n                closeAddPackModal={closeEditPackModal}\r\n                editCard={props.editCard}\r\n                card={props.card}\r\n            />}\r\n            <Button\r\n                size={'small'}\r\n                style={{marginRight: '10px'}}\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={() => props.deleteCard(props.card._id)}\r\n            >DELETE</Button>\r\n            <Button\r\n                style={{marginRight: '10px'}}\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={openEditPackModal}\r\n            >EDIT</Button>\r\n        </TableCell>\r\n    )\r\n\r\n\r\n})","import TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport React, {ChangeEvent, MouseEvent, useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {useStyles} from '../../styles';\r\nimport {deleteCardTC, editCardTC, PackInitialStateType, resetPackAC, setPackTC} from '../../../../bll/pack-reducer';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Table from '@material-ui/core/Table';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {PackTableActions} from \"./PackTableActions\";\r\nimport {EditCardRequestType} from \"../../../../dal/cards-api\";\r\nimport {TableSortLabel} from \"@material-ui/core\";\r\n\r\n\r\nexport const PackTable = React.memo((props: PackNameTableProps) => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const pack = useSelector<AppRootStateType, PackInitialStateType>(state => state.pack)\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packID = useLocation().pathname.substring(6)\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (pack.sortCardDirection === 0) {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return function () {\r\n            dispatch(resetPackAC())\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: newPage + 1}))\r\n    }, [dispatch, packID])\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, pageCount: parseInt(e.target.value, 10)}))\r\n    }\r\n\r\n    const deleteCardHandler = (cardId: string) => {\r\n        dispatch(deleteCardTC(pack.cardsPack_id, cardId))\r\n    }\r\n    const editCardHandler = (data: EditCardRequestType) => {\r\n        dispatch(editCardTC({...data}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n            <TableHead className={classes.tableHead}>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        <TableSortLabel\r\n                            active={pack.sortBy === 'question'}\r\n                            direction={pack.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('question')}\r\n                        >\r\n                            Question\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={pack.sortBy === 'answer'}\r\n                            direction={pack.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('answer')}\r\n                        >\r\n                            Answer\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n\r\n                        <TableSortLabel\r\n                            active={pack.sortBy === 'updated'}\r\n                            direction={pack.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('updated')}\r\n                        >\r\n                            Last Updated\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={pack.sortBy === 'grade'}\r\n                            direction={pack.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('grade')}\r\n                        >\r\n                            Grade\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Actions\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    pack.cards.map((pack) =>\r\n                        <TableRow key={pack._id}>\r\n                            <TableCell component=\"th\">{trimmedString(pack.question, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{trimmedString(pack.answer, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{updateDate(pack.updated)}</TableCell>\r\n                            <TableCell align=\"right\">{Math.round(pack.grade)}</TableCell>\r\n                            {pack.user_id === idUser ?\r\n                                <PackTableActions\r\n                                    deleteCard={deleteCardHandler}\r\n                                    editCard={editCardHandler}\r\n                                    card={pack}\r\n                                />\r\n                                : <TableCell/>}\r\n                        </TableRow>\r\n                    )}\r\n            </TableBody>\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <td className={classes.footerPage}>\r\n                        Page: {pack.page} (Total:{Math.ceil(pack.cardsTotalCount / pack.pageCount)})\r\n                    </td>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25, {\r\n                            label: 'All',\r\n                            value: pack.cardsTotalCount\r\n                        }]}\r\n                        colSpan={6}\r\n                        count={pack.cardsTotalCount}\r\n                        rowsPerPage={pack.pageCount}\r\n                        page={pack.page - 1}\r\n                        SelectProps={{\r\n                            inputProps: {'aria-label': 'rows per page'},\r\n                            native: true,\r\n                        }}\r\n                        labelRowsPerPage={props.labelRowsPerPage}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangePageCount}\r\n                        ActionsComponent={TablePaginationActions}\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        </Table>\r\n    )\r\n})\r\n\r\ntype SortByType = 'question' | 'answer' | 'updated' | 'grade'\r\ntype PackNameTableProps = {\r\n    labelRowsPerPage: string\r\n}","import {PackInitialStateType} from '../bll/pack-reducer';\r\n\r\ntype PacksLocalStorageType = {\r\n    packs: {\r\n        cardPacks: []\r\n        myPacks: boolean\r\n        page: number\r\n        pageCount: number\r\n        min: number\r\n        max: number\r\n        minCardsCount: number\r\n        maxCardsCount: number\r\n        sortPacksDirection: number\r\n        sortBy: string\r\n        user_id: string\r\n        packName: string\r\n        searchText: string\r\n        cardPacksTotalCount: number\r\n    }\r\n}\r\ntype PackLocalStorageType = {\r\n    pack: PackInitialStateType\r\n}\r\ntype localStorageStateType = PacksLocalStorageType | PackLocalStorageType\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('team_project');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: localStorageStateType) => {\r\n    const prevState = loadState()\r\n    try {\r\n        const serializedState = JSON.stringify({...prevState, ...state});\r\n        localStorage.setItem('team_project', serializedState);\r\n    } catch {\r\n\r\n    }\r\n};","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewCard: (question: string, answer: string) => void\r\n}\r\n\r\nexport const AddCardModal = (props: AddPackModalPropsType) => {\r\n    const [question, setQuestion] = useState<string>('')\r\n    const [answer, setAnswer] = useState<string>('')\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        props.addNewCard(question, answer)\r\n        props.closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        props.closeAddPackModal()\r\n    }\r\n    return <>\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: `rgba(${0}, ${0}, ${0}, ${0.2})`,\r\n            zIndex: 10\r\n        }}\r\n             onClick={onBackgroundClick}>\r\n        </div>\r\n        <div style={{\r\n            position: 'fixed',\r\n            left: `calc(50vw - 250px)`,\r\n            top: `calc(50vh - 171px)`,\r\n            width: '500px',\r\n            height: '300px',\r\n            border: '1px solid white',\r\n            borderRadius: '6px 6px 6px 6px',\r\n            backgroundColor: 'white',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            margin: '20px 0',\r\n            zIndex: 11\r\n        }}>\r\n            <h2>Create new card</h2>\r\n            <TextField\r\n                style={{width: '450px'}}\r\n                label=\"Question\"\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                autoFocus\r\n                value={question}\r\n                onChange={inputChangeHandlerQuestion}\r\n            />\r\n\r\n            <TextField\r\n                style={{width: '450px', marginTop: '30px'}}\r\n                label=\"Answer\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                value={answer}\r\n                onChange={inputChangeHandlerAnswer}\r\n            />\r\n            <Button style={{width: '150px', marginTop: '20px'}} color=\"primary\" variant={'contained'}\r\n                    onClick={onButtonClickHandler}>Add new card</Button>\r\n        </div>\r\n\r\n    </>\r\n}","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {useStyles} from '../styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {createCardTC, PackInitialStateType, setPackTC} from '../../../bll/pack-reducer';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {PackTable} from './pack/PackTable';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {CardsInitialStateType} from '../../../bll/packs-reducer';\r\nimport {saveState} from \"../../../utils/localStorage-util\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {AddCardModal} from \"../commonComponents/modal/addCardModal/AddCardModal\";\r\nimport {trimmedString} from \"../../../utils/trimmedString-util\";\r\n\r\n\r\nexport const Pack: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const pack = useSelector<AppRootStateType, PackInitialStateType>(state => state.pack)\r\n    const packs = useSelector<AppRootStateType, CardsInitialStateType>(state => state.packs)\r\n    const packID = useLocation().pathname.substring(6)\r\n    const cardsPack_id = pack.cardsPack_id\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const [cardQuestion, setCardQuestion] = useState<string>('')\r\n    const [cardAnswer, setCardAnswer] = useState<string>('')\r\n    const [intervalID, setIntervalID] = useState<NodeJS.Timeout>()\r\n\r\n    const searchQuestionHandler = (value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setCardQuestion(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: value, cardAnswer: cardAnswer, page: 1}))\r\n        }, 400)\r\n        setIntervalID(newIntervalID)\r\n    }\r\n    const searchAnswerHandler = (value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setCardAnswer(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: cardQuestion, cardAnswer: value, page: 1}))\r\n        }, 400)\r\n        setIntervalID(newIntervalID)\r\n    }\r\n\r\n    let packName = pack.currentPackName\r\n    if (packs.cardPacks.length) {\r\n        packName = packs.cardPacks.filter(card => card._id === packID)[0].name\r\n    }\r\n    useEffect(() => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: 1, pageCount: 5, cardQuestion: '', cardAnswer: ''}))\r\n        return function () {\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n        }\r\n    }, [dispatch, packID])\r\n\r\n    useEffect(() => {\r\n        saveState({\r\n            pack: {...pack, currentPackName: packName, cards: []}\r\n        })\r\n    }, [packName, pack])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n    const [addPackModal, setAddPackModal] = useState<boolean>(false)\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n    const closeAddPackModal = () => {\r\n        setAddPackModal(false)\r\n    }\r\n    const addNewCard = (question: string, answer: string) => {\r\n        dispatch(createCardTC({cardsPack_id: cardsPack_id, question, answer}))\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {addPackModal && <AddCardModal\r\n                closeAddPackModal={closeAddPackModal}\r\n                addNewCard={addNewCard}\r\n            />}\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <Container className={classes.body}>\r\n                    <div style={{display: 'inline-flex', alignItems: 'center', cursor: 'pointer'}}\r\n                         onClick={onClickHandler}>\r\n                        <KeyboardBackspaceIcon/>\r\n                        <div style={{marginLeft: '10px'}}>\r\n                            <h3>Back to packs</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.packListHeading}>{trimmedString(packName, 50)}</div>\r\n                    <div className={classes.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={cardQuestion}\r\n                            dispatchHandler={searchQuestionHandler}\r\n                        />\r\n                        <Input\r\n                            placeholderValue={'Search by answer'}\r\n                            value={cardAnswer}\r\n                            dispatchHandler={searchAnswerHandler}\r\n                        />\r\n                        <Button\r\n                            style={{width: '330px'}}\r\n                            className={classes.addNewCardButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                            disabled={pack.packUserId !== idUser}\r\n                        >\r\n                            Add new card\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer style={{marginTop: '20px'}} component={Paper}>\r\n                        <PackTable labelRowsPerPage={'Cards per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CreatePackRequestType,\r\n    PacksRequestDataType,\r\n    PacksResponseType,\r\n    PacksType\r\n} from '../dal/cards-api';\r\nimport {packsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PacksType>,\r\n    myPacks: false,\r\n    page: 1,\r\n    pageCount: 5,\r\n    min: 0,\r\n    max: 110,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 110,\r\n    sortPacksDirection: 0,\r\n    sortBy: 'updated',\r\n    user_id: '',\r\n    packName: '',\r\n    searchText: '',\r\n    cardPacksTotalCount: 1,\r\n} as CardsInitialStateType\r\n\r\nexport type CardsInitialStateType = PacksResponseType & {\r\n    myPacks: boolean\r\n    sortPacksDirection: number\r\n    sortBy: string\r\n    user_id: string\r\n    packName: string\r\n    searchText: string\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): CardsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-CARD-PACKS':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                myPacks: action.data.user_id.length > 1,\r\n                sortBy: action.data.sortPacks.slice(1),\r\n                sortPacksDirection: Number(action.data.sortPacks.substring(0, 1)),\r\n                searchText: action.data.packName,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardPacksAC = (data: PacksResponseType & NewCardsApiModelType) =>\r\n    ({type: 'cards/SET-CARD-PACKS', data} as const)\r\n\r\n\r\n//thunks\r\nexport const setCardPacksTC = (data?: PacksRequestDataType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newCardsApiModel = packsApiModel(getState().packs, data)\r\n\r\n        const pastPageCount = getState().packs.pageCount\r\n        const currentPage = getState().packs.page\r\n        const currentPageCount = newCardsApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newCardsApiModel.page\r\n\r\n        try {\r\n            const res = await cardPacksApi.fetchPacks({...newCardsApiModel, page: newPage})\r\n            dispatch(setCardPacksAC({...res.data, ...newCardsApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createPackTC = (data: CreatePackRequestType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createPack(data)\r\n            dispatch(setCardPacksTC({packName: '', page: 1, sortPacks: '0updated'}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\nexport const deletePackTC = (packId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deletePack(packId)\r\n            const cardsState = getState().packs\r\n            const remainPacks = cardsState.cardPacksTotalCount - (cardsState.pageCount * (cardsState.page - 1))\r\n            dispatch(setCardPacksTC({\r\n                page: remainPacks === 1\r\n                    ? cardsState.page === 1 ? cardsState.page : cardsState.page - 1\r\n                    : cardsState.page\r\n            }))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packID: string, name?: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.updatePack({_id: packID, name})\r\n            dispatch(setCardPacksTC({page: 1}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\n//types\r\nexport\r\ntype SetCardPacksActionType = ReturnType<typeof setCardPacksAC>\r\n\r\ntype NewCardsApiModelType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\n\r\nexport type PacksActionsType =\r\n    | SetCardPacksActionType\r\n","import ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React, {ChangeEvent, useState} from 'react';\r\nimport {useStyles} from '../../styles';\r\nimport {CardsInitialStateType, setCardPacksTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\n\r\nexport const NavBar: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const packs = useSelector<AppRootStateType, CardsInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const [sliderValue, setSliderValue] = useState<number[]>([packs.min, packs.max])\r\n\r\n\r\n    const onMyButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: id, min: 0, page: 1, pageCount: 5}))\r\n        setSliderValue([0, packs.max])\r\n    }\r\n\r\n    const onAllButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: '', min: sliderValue[0], max: sliderValue[1], page: 1, pageCount: 5}))\r\n    }\r\n\r\n    const changeSliderValue = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number[])\r\n    }\r\n\r\n    const changeSliderValueForPayload = () => {\r\n        dispatch(setCardPacksTC({min: sliderValue[0], max: sliderValue[1], page: 1}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid className={classes.navBar}>\r\n            <span className={classes.showPacksCards}>Show packs cards</span>\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" className={classes.MyAllButtons}>\r\n                <Button onClick={onMyButtonClick}\r\n                        variant={packs.myPacks ? 'contained' : 'outlined'}>My</Button>\r\n                <Button onClick={onAllButtonClick}\r\n                        variant={packs.myPacks ? 'outlined' : 'contained'}>All</Button>\r\n            </ButtonGroup>\r\n            <div\r\n                style={{ marginTop: '50px',width: '150px',}}\r\n            >\r\n            <Slider\r\n\r\n                value={sliderValue}\r\n                max={packs.maxCardsCount}\r\n                onChange={changeSliderValue}\r\n                onChangeCommitted={changeSliderValueForPayload}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n            />\r\n            </div>\r\n        </Grid>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {Button, Radio} from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport {useStyles} from '../../../styles';\r\nimport {ProgressModalComponent} from '../progressModalComponent/ProgressModalComponent';\r\n\r\n\r\ntype LearnCardsModalPropsType = {\r\n    question: string\r\n    answer: string\r\n    packName: string\r\n    openNextRandomCard: (grade: number) => void\r\n    closeAllModal: () => void\r\n}\r\n\r\ntype obj = {\r\n    valueOfGrade: number\r\n    title: string\r\n}\r\ntype GradeType = obj[]\r\n\r\n\r\nexport const LearnCardsModalAnswer = ({\r\n                                          question,\r\n                                          answer,\r\n                                          packName,\r\n                                          openNextRandomCard,\r\n                                          closeAllModal,\r\n                                      }: LearnCardsModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n    const [grade, setGrade] = useState<number>(0)\r\n\r\n    const arrayOfGrades: GradeType = [\r\n        {valueOfGrade: 1, title: 'Did not know'},\r\n        {valueOfGrade: 2, title: 'Forgot'},\r\n        {valueOfGrade: 3, title: 'A lot of thought'},\r\n        {valueOfGrade: 4, title: 'Confused'},\r\n        {valueOfGrade: 5, title: 'Knew the answer'},\r\n    ]\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n    const onChangeCallback = (checkedValue: number) => {\r\n        if (grade === checkedValue) {\r\n            setGrade(0)\r\n        } else if (grade !== checkedValue) {\r\n            setGrade(checkedValue)\r\n        }\r\n    }\r\n\r\n    const nextButtonClickHandler = () => {\r\n        openNextRandomCard(grade === 0 ? 1 : grade)\r\n        setGrade(0)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.learnCardsModalDarkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div style={{\r\n                position: 'fixed',\r\n                left: `calc(50vw - 220px)`,\r\n                top: `calc(50vh - 306px)`,\r\n                width: '440px',\r\n                height: '550px',\r\n                border: '1px solid white',\r\n                borderRadius: '6px 6px 6px 6px',\r\n                backgroundColor: 'white',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-between',\r\n                padding: '20px 0 40px',\r\n                zIndex: 11\r\n            }}>\r\n                <h2 style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '10px 30px',\r\n                    textAlign: 'center',\r\n                }}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '5px 30px',\r\n                    fontSize: '18px',\r\n                }}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n                <div style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '5px 30px',\r\n                    fontSize: '18px',\r\n                }}>\r\n                    <b>Answer: </b>{trimmedString(answer, 90)}\r\n                </div>\r\n\r\n                <div style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '5px 30px',\r\n                    fontSize: '18px',\r\n                }}>\r\n                    <b>{'Rate yourself:'}</b>\r\n                </div>\r\n                <ProgressModalComponent/>\r\n                <FormGroup aria-label=\"position\"\r\n                           style={{\r\n                               margin: '5px 30px',\r\n                               display: 'inline-flex',\r\n                           }}>\r\n                    {\r\n                        arrayOfGrades.map((el, i) => {\r\n                            return <FormControlLabel\r\n                                key={i}\r\n                                name=\"myRadio\"\r\n                                control={<Radio name=\"myRadio\"\r\n                                                color=\"primary\"\r\n                                                checked={el.valueOfGrade === grade}\r\n                                                onClick={() => onChangeCallback(el.valueOfGrade)}/>}\r\n                                label={el.title}\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        })\r\n                    }\r\n                </FormGroup>\r\n\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={nextButtonClickHandler}\r\n                    style={{margin: '30px auto 0', width: '100px'}}\r\n                >Next</Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, GradeRequestType, OnePackType, PackRequestType} from '../dal/cards-api';\r\n\r\n\r\nconst initialState = [] as OnePackType[]\r\n\r\nexport type CardsForLearnInitialStateType = typeof initialState\r\n\r\nexport const cardsForLearnReducer = (state = initialState, action: CardsForLearnActionsType): CardsForLearnInitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'cardsForLearn/SET-CARDS-OF-PACK':\r\n            return [\r\n                ...action.data,\r\n            ]\r\n\r\n        case 'cardsForLearn/RESET-CARDS-OF-PACK':\r\n            return []\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardsOfPackAC = (data: OnePackType[]) =>\r\n    ({type: 'cardsForLearn/SET-CARDS-OF-PACK', data} as const)\r\n\r\nexport const resetCardsOfPackAC = () =>\r\n    ({type: 'cardsForLearn/RESET-CARDS-OF-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchCardsOfPackTC = (data: PackRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const cardsOfPackApiModel = {\r\n            cardsPack_id: data.cardsPack_id,\r\n            pageCount: data.pageCount,\r\n        }\r\n        try {\r\n            const res = await cardPacksApi.fetchPack(cardsOfPackApiModel)\r\n            dispatch(setCardsOfPackAC(res.data.cards))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const updatedGradeTC = (data: GradeRequestType, pageCount: number): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await cardPacksApi.updatedGrade(data)\r\n            dispatch(fetchCardsOfPackTC({cardsPack_id: res.data.updatedGrade.cardsPack_id, pageCount}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport\r\ntype SetCardsOfPackActionType = ReturnType<typeof setCardsOfPackAC>\r\ntype ResetCardsOfPackActionType = ReturnType<typeof resetCardsOfPackAC>\r\n\r\nexport type CardsForLearnActionsType =\r\n    | SetCardsOfPackActionType\r\n    | ResetCardsOfPackActionType\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype AddPackModalPropsType = {\r\n    oldName: string\r\n    closeEditPackModal: () => void\r\n    updatePackName: (name?: string) => void\r\n}\r\n\r\nexport const EditPackModal = (props: AddPackModalPropsType) => {\r\n    const [newName, setNewName] = useState<string>('')\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        props.updatePackName(newName)\r\n        props.closeEditPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        props.closeEditPackModal()\r\n    }\r\n    return <>\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: `rgba(${0}, ${0}, ${0}, ${0.2})`,\r\n            zIndex: 10\r\n        }}\r\n             onClick={onBackgroundClick}>\r\n        </div>\r\n        <div style={{\r\n            position: 'fixed',\r\n            left: `calc(50vw - 200px)`,\r\n            top: `calc(50vh - 171px)`,\r\n            width: '400px',\r\n            height: '300px',\r\n            border: '1px solid white',\r\n            borderRadius: '6px 6px 6px 6px',\r\n            backgroundColor: 'white',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            padding: '20px 0',\r\n            zIndex: 11\r\n        }}>\r\n            <h2>Enter new name of pack</h2>\r\n            <TextField\r\n                style={{margin: '30px 0 50px 0'}}\r\n                variant=\"outlined\"\r\n                margin=\"none\"\r\n                label=\"New name\"\r\n                placeholder={`Old: ${props.oldName}`}\r\n                autoFocus\r\n                value={newName}\r\n                onChange={inputChangeHandler}\r\n            />\r\n            <Button color=\"primary\" variant={'contained'} onClick={onButtonClickHandler}>RENAME</Button>\r\n        </div>\r\n\r\n    </>\r\n}","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport {useStyles} from '../../../styles';\r\n\r\ntype LearnCardsModalPropsType = {\r\n    packName: string\r\n    question: string\r\n    onAnswerButtonClick: () => void\r\n    closeAllModal: () => void\r\n}\r\n\r\nexport const LearnCardsModalQuestion = ({\r\n                                            packName,\r\n                                            question,\r\n                                            onAnswerButtonClick,\r\n                                            closeAllModal,\r\n                                        }: LearnCardsModalPropsType) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.learnCardsModalDarkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={classes.learnCardsModalWindowByQuestion}>\r\n                <h2 style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '10px 30px',\r\n                    textAlign: 'center',\r\n                }}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n                <div style={{\r\n                    maxWidth: '440px',\r\n                    overflowWrap: 'break-word',\r\n                    margin: '5px 30px',\r\n                    fontSize: '18px',\r\n                }}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n                <Button\r\n                    color=\"primary\" variant={'contained'}\r\n                    onClick={onAnswerButtonClick}\r\n                    style={{margin: '30px auto 0', width: '160px'}}>Show answer</Button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport React, {ChangeEvent, MouseEvent, useCallback, useEffect, useState} from 'react';\r\nimport {CardsInitialStateType, deletePackTC, setCardPacksTC, updatePackTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {useStyles} from '../../styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport {LearnCardsModalAnswer} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalAnswer';\r\nimport {OnePackType} from '../../../../dal/cards-api';\r\nimport {\r\n    CardsForLearnInitialStateType,\r\n    fetchCardsOfPackTC,\r\n    resetCardsOfPackAC,\r\n    updatedGradeTC\r\n} from '../../../../bll/learn-reducer';\r\nimport {EditPackModal} from '../../commonComponents/modal/editPackModal/EditPackModal';\r\nimport {LearnCardsModalQuestion} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalQuestion';\r\nimport {TableSortLabel} from '@material-ui/core';\r\n\r\n\r\nexport const PacksListTable = React.memo((props: PacksListTableProps) => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const packs = useSelector<AppRootStateType, CardsInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const cardsForLearn = useSelector<AppRootStateType, CardsForLearnInitialStateType>(state => state.cardsForLearn)\r\n\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n    const [editPackData, setEditPackData] = useState({id: '', name: ''})\r\n    const [learnCardsModalQuestion, setLearnCardsModalQuestion] = useState(false)\r\n    const [learnCardsModalAnswer, setLearnCardsModalAnswer] = useState(false)\r\n\r\n    const [randomCard, setRandomCard] = useState({} as OnePackType)\r\n    const [name, setName] = useState('')\r\n    const [cardsCount, setCardsCount] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        if (cardsForLearn.length) {\r\n            setRandomCard(getCard(cardsForLearn))\r\n            setLearnCardsModalAnswer(false)\r\n            setLearnCardsModalQuestion(true)\r\n        }\r\n    }, [cardsForLearn])\r\n\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (packs.sortPacksDirection === 0) {\r\n            dispatch(setCardPacksTC({sortPacks: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setCardPacksTC({sortPacks: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const onDeleteButtonClickHandler = (packId: string) => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setCardPacksTC({page: newPage + 1}))\r\n    }, [dispatch])\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setCardPacksTC({pageCount: parseInt(e.target.value)}))\r\n    }\r\n\r\n    const getCard = (cards: OnePackType[]) => {\r\n        const sumOfRepeats = cards.map(card => (6 - card.grade) ** 2).reduce((acc, el) => (acc + el), 0)\r\n        const random = Math.random() * sumOfRepeats\r\n        let sum = 0\r\n        let i = 0\r\n        do {\r\n            sum = sum + ((6 - cards[i].grade) ** 2)\r\n            i++\r\n        } while (sum < random)\r\n        return cards[i - 1]\r\n    }\r\n\r\n    const startLearning = async (cardsPack_id: string, pageCount: number, name: string) => {\r\n        await dispatch(fetchCardsOfPackTC({cardsPack_id, pageCount}))\r\n        setName(name)\r\n        setCardsCount(pageCount)\r\n    }\r\n\r\n    const openEditPackModal = (id: string, name: string) => {\r\n        setEditPackData({id, name})\r\n        setEditPackModal(true)\r\n    }\r\n    const closeEditPackModal = () => {\r\n        setEditPackModal(false)\r\n    }\r\n    const updatePackName = (newName?: string) => {\r\n        dispatch(updatePackTC(editPackData.id, newName))\r\n    }\r\n\r\n    const closeAllModal = () => {\r\n        dispatch(resetCardsOfPackAC())\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(false)\r\n    }\r\n    const fetchAnswerQuestion = () => {\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(true)\r\n    }\r\n    const openNextRandomCard = (grade: number) => {\r\n        dispatch(updatedGradeTC({grade: grade === 0 ? 1 : grade, card_id: randomCard._id}, cardsCount))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                learnCardsModalQuestion &&\r\n                <LearnCardsModalQuestion\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    onAnswerButtonClick={fetchAnswerQuestion}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                learnCardsModalAnswer &&\r\n                <LearnCardsModalAnswer\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    answer={randomCard.answer}\r\n                    openNextRandomCard={openNextRandomCard}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                editPackModal &&\r\n                <EditPackModal\r\n                    oldName={editPackData.name}\r\n                    closeEditPackModal={closeEditPackModal}\r\n                    updatePackName={updatePackName}\r\n                />\r\n            }\r\n            <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                <TableHead className={classes.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'name'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('name')}\r\n                            >\r\n                                Name\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'cardsCount'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('cardsCount')}\r\n                            >\r\n                                Cards\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'updated'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('updated')}\r\n                            >\r\n                                Last Updated\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'created'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('created')}\r\n                            >\r\n                                Created By\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        packs.cardPacks.map((pack) => (\r\n                                <TableRow key={pack._id}>\r\n                                    <TableCell component=\"th\">\r\n                                        <NavLink to={`/pack/${pack._id}`} className={classes.navLink}>\r\n                                            {trimmedString(pack.name, 10)}\r\n                                        </NavLink>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{pack.cardsCount}</TableCell>\r\n                                    <TableCell align=\"right\">{updateDate(pack.updated)}</TableCell>\r\n                                    <TableCell align=\"right\">{trimmedString(pack.user_name, 10)}</TableCell>\r\n                                    <TableCell align=\"right\" style={{width: '224px'}}>\r\n                                                    <span className={classes.buttonsOfActionsSection}>\r\n                                                        {pack.user_id === id &&\r\n                                                        <span>\r\n                                                            <Button onClick={() => onDeleteButtonClickHandler(pack._id)}\r\n                                                                    size={'small'} color={'secondary'}\r\n                                                                    variant={'outlined'}>Delete</Button>\r\n                                                            <Button size={'small'} variant={'outlined'}\r\n                                                                    style={{margin: '0 10px'}}\r\n                                                                    onClick={() => openEditPackModal(pack._id, pack.name)}\r\n                                                            >\r\n                                                                Edit\r\n                                                            </Button>\r\n                                                        </span>\r\n                                                        }\r\n                                                        <Button size={'small'}\r\n                                                                variant={'outlined'}\r\n                                                                onClick={() => startLearning(pack._id, pack.cardsCount, pack.name)}\r\n                                                                disabled={pack.cardsCount === 0}\r\n                                                        >\r\n                                                            Learn\r\n                                                        </Button>\r\n                                                    </span>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        )\r\n                    }\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <td className={classes.footerPage}>\r\n                            Page: {packs.page} (Total:{Math.ceil(packs.cardPacksTotalCount / packs.pageCount)})\r\n                        </td>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25, {\r\n                                label: 'All',\r\n                                value: packs.cardPacksTotalCount\r\n                            }]}\r\n                            colSpan={6}\r\n                            count={packs.cardPacksTotalCount}\r\n                            rowsPerPage={packs.pageCount}\r\n                            page={packs.page - 1}\r\n                            SelectProps={{\r\n                                inputProps: {'aria-label': 'rows per page'},\r\n                                native: true,\r\n                            }}\r\n                            labelRowsPerPage={props.labelRowsPerPage}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangePageCount}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n        </>\r\n    )\r\n})\r\n\r\ntype SortByType = 'name' | 'cardsCount' | 'updated' | 'created'\r\ntype PacksListTableProps = {\r\n    labelRowsPerPage: string\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewPack: (newPackName: string) => void\r\n}\r\n\r\nexport const AddPackModal = (props: AddPackModalPropsType) => {\r\n    const [text, setText] = useState<string>('')\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        props.addNewPack(text)\r\n        props.closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        props.closeAddPackModal()\r\n    }\r\n    return <>\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: `rgba(${0}, ${0}, ${0}, ${0.2})`,\r\n            zIndex: 10\r\n        }}\r\n             onClick={onBackgroundClick}>\r\n        </div>\r\n        <div style={{\r\n            position: 'fixed',\r\n            left: `calc(50vw - 200px)`,\r\n            top: `calc(50vh - 161px)`,\r\n            width: '400px',\r\n            height: '280px',\r\n            border: '1px solid white',\r\n            borderRadius: '6px 6px 6px 6px',\r\n            backgroundColor: 'white',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            margin: '20px 0',\r\n            zIndex: 11\r\n        }}>\r\n            <h2>Enter new pack name</h2>\r\n            <TextField\r\n                style={{margin: '30px 0 50px 0'}}\r\n                variant=\"outlined\"\r\n                margin=\"none\"\r\n                label=\"Name\"\r\n                autoFocus\r\n                value={text}\r\n                onChange={inputChangeHandler}\r\n            />\r\n            <Button color=\"primary\" variant={'contained'} onClick={onButtonClickHandler}>Add new pack</Button>\r\n        </div>\r\n\r\n    </>\r\n}","import {useStyles} from '../styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {CardsInitialStateType, createPackTC, setCardPacksTC} from '../../../bll/packs-reducer';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport {NavBar} from './packs/NavBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {PacksListTable} from './packs/PacksListTable';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {AddPackModal} from '../commonComponents/modal/addPackModal/AddPackModal';\r\n\r\nexport const PacksList: React.FC = React.memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const packs = useSelector<AppRootStateType, CardsInitialStateType>(state => state.packs)\r\n\r\n    useEffect(() => {\r\n        dispatch(setCardPacksTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        saveState({\r\n            packs: {\r\n                cardPacks: [],\r\n                myPacks: packs.myPacks,\r\n                page: packs.page,\r\n                pageCount: packs.pageCount,\r\n                min: packs.min,\r\n                max: packs.max,\r\n                minCardsCount: packs.minCardsCount,\r\n                maxCardsCount: packs.maxCardsCount,\r\n                sortPacksDirection: packs.sortPacksDirection,\r\n                sortBy: packs.sortBy,\r\n                user_id: packs.user_id,\r\n                packName: packs.packName,\r\n                searchText: packs.searchText,\r\n                cardPacksTotalCount: packs.cardPacksTotalCount,\r\n            }\r\n        })\r\n    }, [packs])\r\n\r\n    const [searchText, setSearchText] = useState<string>(packs.searchText)\r\n    const [intervalID, setIntervalID] = useState<NodeJS.Timeout>()\r\n\r\n    const searchInputHandler = (value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setSearchText(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setCardPacksTC({packName: value, page: 1}))\r\n        }, 400)\r\n        setIntervalID(newIntervalID)\r\n    }\r\n\r\n\r\n    const [addPackModal, setAddPackModal] = useState<boolean>(false)\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n    const closeAddPackModal = () => {\r\n        setAddPackModal(false)\r\n    }\r\n    const addNewPack = (newPackName: string) => {\r\n        dispatch(createPackTC({cardsPack: {name: newPackName}}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {addPackModal && <AddPackModal\r\n                closeAddPackModal={closeAddPackModal}\r\n                addNewPack={addNewPack}\r\n            />}\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <NavBar/>\r\n                <Container className={classes.body}>\r\n                    <div className={classes.packListHeading}>Packs list</div>\r\n                    <div className={classes.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={searchText}\r\n                            dispatchHandler={searchInputHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewPackButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                        >\r\n                            Add new pack\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer style={{marginTop: '20px'}} component={Paper}>\r\n                        <PacksListTable labelRowsPerPage={'Packs per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Registration} from './components/auth/registration/Registration';\r\nimport {Login} from './components/auth/login/Login';\r\nimport {ForgotPassword} from './components/auth/forgotPassword/ForgotPassword';\r\nimport {Profile} from './components/profile/Profile';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './bll/store';\r\nimport {initializeAppTC} from './bll/app-reducer';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {NewPassword} from './components/auth/forgotPassword/NewPassword';\r\nimport {logoutTC} from './bll/auth-reducer';\r\nimport {PrivateRoute} from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\nimport {Header} from './components/header/Header';\r\nimport {Pack} from './components/main/pack/Pack';\r\nimport {PacksList} from './components/main/packsList/PacksList';\r\n\r\nfunction App() {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button><NavLink to=\"/\">Home</NavLink></button>\r\n                <button><NavLink to=\"/\">Main</NavLink></button>\r\n                <button><NavLink to=\"/registration\">Register</NavLink></button>\r\n                <button><NavLink to=\"/login\">Login</NavLink></button>\r\n                <button><NavLink to=\"/changepassword\">Change Password</NavLink></button>\r\n                <button><NavLink to=\"/profile\">Profile</NavLink></button>\r\n                <span style={{color: `${isInitialized ? 'green' : 'red'}`}}> (INITIALIZED) </span>\r\n                <span style={{color: `${isLoggedIn ? 'green' : 'red'}`}}> (LOGIN) </span>\r\n                <span style={{color: `${isRegistered ? 'green' : 'red'}`}}> (REGISTERED) </span>\r\n                <button onClick={obLogOutClick}>LOGOUT</button>\r\n            </div>\r\n\r\n            <Header/>\r\n            <div>\r\n                <Switch>\r\n                    {/*<PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <Main/>} redirectTo=\"/login\"/>*/}\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <PacksList/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute exact path='/pack/:id' isLoggedIn={isLoggedIn} render={() => <Pack/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>} redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>}\r\n                                  redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// <Route path=\"/admin\" render={ () => (isAuth ? ( <> <Route path=\"/admin/categories\" component={() => <CategoriesAdmin setStore={setStore} store={store} setAppSide={setAppSide} />} /> <Route path=\"/admin/words/:id\" component={() => <Words setStore={setStore} store={store} setAppSide={setAppSide} />} /> </> ) : <Redirect to={'/main'}/>)} />","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, LoginActionsType} from './auth-reducer';\r\nimport {RegisterActionsType, registerReducer} from './register-reducer';\r\nimport {ChangePasswordActionsType, changePasswordReducer} from './changePassword-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {setNewPasswordActionTypes, setNewPasswordReducer} from './setNewPassword-reducer';\r\nimport {PacksActionsType, packsReducer} from './packs-reducer';\r\nimport {loadState} from '../utils/localStorage-util';\r\nimport {PackActionsType, packReducer} from './pack-reducer';\r\nimport {CardsForLearnActionsType, cardsForLearnReducer} from './learn-reducer';\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    login: authReducer,\r\n    register: registerReducer,\r\n    changePassword: changePasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    pack: packReducer,\r\n    cardsForLearn: cardsForLearnReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, loadState(), applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | LoginActionsType\r\n    | RegisterActionsType\r\n    | ChangePasswordActionsType\r\n    | setNewPasswordActionTypes\r\n    | AppActionsType\r\n    | PacksActionsType\r\n    | PackActionsType\r\n    | CardsForLearnActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}