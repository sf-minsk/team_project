{"version":3,"sources":["features/error404/Error404.module.css","dal/auth-api.ts","bll/profile-reducer.ts","bll/auth-reducer.ts","bll/app-reducer.ts","features/errors/ErrorSnackbar.tsx","components/cards/Cards.tsx","dal/register-api.ts","bll/register-reducer.ts","components/auth/registration/Registration.tsx","components/auth/login/Login.tsx","dal/changePassword-api.ts","utils/changePasswordModel-util.ts","bll/changePassword-reducer.ts","components/auth/forgotPassword/ForgotPassword.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/auth/forgotPassword/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","authApi","data","post","delete","initialState","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","error","setProfileAC","type","payload","isLoggedIn","setSignInAC","value","errorType","status","isInitialized","setAppErrorAC","setAppStatusAC","setIsInitializedAC","ErrorSnackbar","dispatch","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","Cards","registerApi","isRegistered","Registration","classes","useStyles","register","formik","useFormik","initialValues","password","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","a","response","message","resetForm","to","Container","component","maxWidth","CssBaseline","className","paper","Avatar","Typography","variant","CircularProgress","style","position","top","textAlign","handleSubmit","form","noValidate","TextField","height","fullWidth","label","margin","autoFocus","helperText","touched","errors","getFieldProps","Button","color","submit","disabled","isValid","makeStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","palette","secondary","main","width","Login","requestStatus","res","FormControlLabel","control","Checkbox","Grid","container","item","xs","Link","RouterLink","changePasswordApi","model","changePasswordModel","from","changeProcess","ForgotPassword","changePassword","left","id","Profile","profileData","profile","newPasswordSet","NewPassword","setNewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","console","log","history","useHistory","onClickHandler","useCallback","goBack","s","src","Error404Img","alt","size","onClick","App","login","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69288d78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__2OK93\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseAuthType>(`auth/login`, data)\r\n    },\r\n    me(){\r\n        return instance.post<ResponseAuthType>(`auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type ResponseAuthType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n","import {ResponseAuthType} from \"../dal/auth-api\";\r\n\r\nconst initialState: ProfileStateType = {\r\n    _id: null,\r\n    email: null,\r\n    name: null,\r\n    avatar: null,\r\n    publicCardPacksCount: null,\r\n    created: null,\r\n    updated: null,\r\n    isAdmin: null,\r\n    verified: null,\r\n    rememberMe: null,\r\n    error: null\r\n}\r\n\r\nexport type ProfileStateType = {\r\n    _id: string | null,\r\n    email: string | null,\r\n    name: string | null,\r\n    avatar?: string | null,\r\n    publicCardPacksCount: number | null,\r\n    created: Date | null,\r\n    updated: Date | null,\r\n    isAdmin: boolean | null,\r\n    verified: boolean | null,\r\n    rememberMe: boolean | null,\r\n    error?: string | null\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: ResponseAuthType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\n\r\ntype ProfileActionsType = SetProfileActionType\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>","import {authApi, LoginParamsType} from '../dal/auth-api';\r\nimport {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n    //profile\r\n\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: LoginActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-SIGN-IN':\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignInAC = (value: boolean) =>\r\n    ({type: 'login/SET-SIGN-IN', value} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.login(data)\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch((setAppStatusAC('succeeded')))\r\n        } catch (err) {\r\n            const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n\r\n    }\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LoginActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\n\r\n","import {authApi} from '../dal/auth-api';\r\nimport {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from \"./profile-reducer\";\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'idle' as RequestStatusType, ///\r\n    isInitialized: false ///is necessary data for all app is requested\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {\r\n                ...state, error: action.error, errorType: action.errorType\r\n            }\r\n        case 'app/SET-APP-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {\r\n                ...state, isInitialized: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (value: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunks\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            let res = await authApi.me()\r\n            if (res.data) {\r\n                dispatch(setSignInAC(true))\r\n                dispatch(setProfileAC(res.data))\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        } finally {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | ReturnType<typeof setIsInitializedAC>\r\nexport type AppErrorType = \"error\" | \"warning\" | \"info\" | \"success\"","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport React from 'react';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react';\r\nimport {ErrorSnackbar} from \"../../features/errors/ErrorSnackbar\";\r\n\r\nexport const Cards = () => {\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            Cards\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    withCredentials: true,\r\n})\r\n\r\n//api\r\nexport const registerApi = {\r\n    register(data: RegisterRequestDataType) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, data)\r\n    },\r\n}\r\n\r\nexport type RegisterRequestDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}","import {AppThunk} from './store';\r\nimport {registerApi, RegisterRequestDataType} from '../dal/register-api';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'register/SET-SIGN-UP':\r\n            return {\r\n                ...state, isRegistered: action.isRegistered\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setSignUpAC = (isRegistered: boolean) =>\r\n    ({type: 'register/SET-SIGN-UP', isRegistered} as const)\r\n\r\n\r\n//thunks\r\nexport const setSignUpTC = (data: RegisterRequestDataType): AppThunk =>\r\n    async dispatch => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            await registerApi.register(data)\r\n            dispatch(setSignUpAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\n\r\nexport type RegisterActionsType =\r\n    | SetSignUpActionType\r\n    | SetAppErrorActionType","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setSignUpTC} from '../../../bll/register-reducer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {RequestStatusType} from '../../../bll/app-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\n\r\nexport const Registration: React.FC = () => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(15, 'Must be 15 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    {\r\n                        status === 'loading' &&\r\n                        <CircularProgress style={{position: 'fixed', top: '40%', textAlign: 'center'}}/>\r\n                    }\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n\r\n                        <Button\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}))","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {RequestStatusType} from '../../../bll/app-reducer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\n\r\n//\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                // .min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    if (requestStatus === 'loading') {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    // if (isLoggedIn) {\r\n    //     return <Redirect to={'/profile'}/>\r\n    // }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        // autoComplete=\"email\"\r\n                        type=\"email\"\r\n                        // autoFocus\r\n                        // error={!!formik.errors.email}\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        // error={!!formik.errors.password}\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\n// API\r\nexport const changePasswordApi = {\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n// Types\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    changeProcess: false\r\n}\r\n\r\nexport const changePasswordReducer = (state: initialStateType = initialState, action: ChangePasswordActionsType) => {\r\n    switch (action.type) {\r\n        case 'changePassword/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const changePasswordAC = () => {\r\n    return {\r\n        type: 'changePassword/CHANGE-PASSWORD',\r\n    } as const\r\n}\r\n\r\n//THUNK creators\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await changePasswordApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n}\r\n\r\n// Types\r\ntype initialStateType = typeof initialState\r\nexport type ChangePasswordActionsType =\r\n    | ReturnType<typeof changePasswordAC>\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {changePasswordTC} from \"../../../bll/changePassword-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.changePassword.changeProcess)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email('Invalid email address').required('Required field'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <ErrorSnackbar/>\r\n                {(status === 'loading') &&\r\n                <div\r\n                    style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                    <CircularProgress/>\r\n                </div>\r\n                }\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                        <TextField\r\n                            style={{height: '65px'}}\r\n                            id=\"email\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            // autoComplete=\"email\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {ErrorSnackbar} from \"../../features/errors/ErrorSnackbar\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>{`Your e-mail: ${profileData}`}</div>\r\n        </div>\r\n    )\r\n}","import {AppThunk} from './store';\r\nimport {changePasswordApi} from '../dal/changePassword-api';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\n\r\nconst initialState = {\r\n    newPasswordSet: false\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialStateType = initialState, action: setNewPasswordActionTypes) => {\r\n    switch (action.type) {\r\n        case 'setNewPassword/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nconst setNewPasswordAC = () => {\r\n    return {\r\n        type: 'setNewPassword/SET-NEW-PASSWORD',\r\n    } as const\r\n}\r\n\r\n// THUNK Creators\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await changePasswordApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : e.message))\r\n        dispatch(setAppStatusAC('failed'))\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n\r\n}\r\n\r\n// Types\r\ntype initialStateType = {\r\n    newPasswordSet: boolean\r\n}\r\nexport type setNewPasswordActionTypes =\r\n    | ReturnType<typeof setNewPasswordAC>","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPasswordTC} from \"../../../bll/setNewPassword-reducer\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOpenOutlinedIcon from \"@material-ui/icons/LockOpenOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {ErrorSnackbar} from \"../../../features/errors/ErrorSnackbar\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(15, 'Must be 15 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n    const classes = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }))();\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            {(status === 'loading') &&\r\n            <div\r\n                style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n            }\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"password\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        id=\"confirmPassword\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n\r\n    )\r\n}\r\n","import React, {ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}\r\n\r\nexport const PrivateRoute: React.FC<PropsType> = ({render: Component, isLoggedIn, path, redirectTo, exact}) => {\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Error404 = () => {\r\n    console.log('Error404')\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Cards} from './components/cards/Cards';\r\nimport {Registration} from './components/auth/registration/Registration';\r\nimport {Login} from './components/auth/login/Login';\r\nimport {ForgotPassword} from './components/auth/forgotPassword/ForgotPassword';\r\nimport {Profile} from \"./components/profile/Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./bll/store\";\r\nimport {initializeAppTC} from \"./bll/app-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {NewPassword} from \"./components/auth/forgotPassword/NewPassword\";\r\nimport {logoutTC} from \"./bll/auth-reducer\";\r\nimport { PrivateRoute } from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\n\r\nfunction App() {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button><NavLink to='/'>Home</NavLink></button>\r\n                <button><NavLink to='/registration'>Register</NavLink></button>\r\n                <button><NavLink to='/login'>Login</NavLink></button>\r\n                <button><NavLink to='/changepassword'>Change Password</NavLink></button>\r\n                <button><NavLink to='/profile'>Profile</NavLink></button>\r\n                <span style={{color: `${isInitialized ? 'green' : 'red'}`}}> (INITIALIZED) </span>\r\n                <span style={{color: `${isLoggedIn ? 'green' : 'red'}`}}> (LOGIN) </span>\r\n                <span style={{color: `${isRegistered ? 'green' : 'red'}`}}> (REGISTERED) </span>\r\n                <button onClick={obLogOutClick}>LOGOUT</button>\r\n            </div>\r\n\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <Cards/>} redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>} redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>} redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>} redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// <Route path=\"/admin\" render={ () => (isAuth ? ( <> <Route path=\"/admin/categories\" component={() => <CategoriesAdmin setStore={setStore} store={store} setAppSide={setAppSide} />} /> <Route path=\"/admin/words/:id\" component={() => <Words setStore={setStore} store={store} setAppSide={setAppSide} />} /> </> ) : <Redirect to={'/main'}/>)} />","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, LoginActionsType} from './auth-reducer';\r\nimport {RegisterActionsType, registerReducer} from './register-reducer';\r\nimport {ChangePasswordActionsType, changePasswordReducer} from './changePassword-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {setNewPasswordActionTypes, setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    login: authReducer,\r\n    register: registerReducer,\r\n    changePassword: changePasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | LoginActionsType\r\n    | RegisterActionsType\r\n    | ChangePasswordActionsType\r\n    | setNewPasswordActionTypes\r\n    | AppActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}